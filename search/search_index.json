{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Enterprise Azure Policy as Code (EPAC)","text":""},{"location":"#overview","title":"Overview","text":"<p>Enterprise Azure Policy as Code or EPAC for short comprises a number of scripts which can be used in CI/CD based system or a semi-automated use to deploy Policies, Policy Sets, Assignments, Policy Exemptions and Role Assignments.</p> <p>Main features include:</p> <ul> <li>Multi-tenant/environment policy deployment</li> <li>Easy CI/CD Integration</li> <li>Extract existing policy objects from an environment</li> <li>Support JSON and CSV inputs for large complex policies</li> <li>PowerShell Module</li> <li>Integration with Azure Landing Zone recommended policies</li> <li>Starter Kit with examples</li> <li>Schema to provide Intellisense for VS Code development</li> </ul>"},{"location":"#who-should-use-epac","title":"Who Should use EPAC?","text":"<p>EPAC is designed for organizations with a large number of Policies, Policy Sets and Assignments. It is also designed for organizations with multiple tenants and/or environments. You can also combine ALZ and EPAC through the provided \"Integration of EPAC with Azure Landing Zones\".</p> <p>EPAC can be used by small organizations with a small number of Policies, Policy Sets and Assignments. Depending on their DevSecOps maturity, Azure Landing Zones direct implementation of Policies might be a better choice.</p> <p>For extremely small Azure customers with one or two subscriptions Microsoft Defender for Cloud automated Policy Assignments for built-in Policies is sufficient.</p>"},{"location":"#tracking-epac-usage","title":"Tracking EPAC Usage","text":"<p>Starting with v8.0.0, Enterprise Policy as Code (EPAC) is tracking the usage using Customer Usage Attribution EPAC is in the role of a partner as defined in the linked documentation. We use this data to justify the investment in EPAC and to prioritize features.</p> <p>You have the right and means to opt-out; see Usage Tracking.</p>"},{"location":"#project-links","title":"Project Links","text":"<ul> <li>GitHub Repo</li> <li>GitHub Issues</li> <li>Starter Kit</li> <li>Enterprise Policy as Code PowerShell Module</li> <li>Azure Enterprise Policy as Code \u2013 A New Approach</li> <li>Azure Enterprise Policy as Code \u2013 Azure Landing Zones Integration</li> </ul>"},{"location":"#epac-and-defender-for-cloud-assignments","title":"EPAC and Defender for Cloud Assignments","text":"<p>Defender for Cloud uses Azure Policy Assignments to enable and configure the various capabilities. Prior to v9.0.0 EPAC removed these subscription-level assignments.</p> <ul> <li>Policy Assignments required for Defender plans (e.g., SQL, App Service, ...). These is no longer managed (removed) by EPAC v9.0.0 and later.</li> <li>Policy Assignments required for Security policies (e.g., Microsoft Cloud Security Benchmark, NIST 800-53 Rev 5, NIST 800-171, ...). The default <code>desiredState</code> behavior is to manage (remove) these assignments. Setting <code>keepDfcSecurityAssignments</code> to <code>true</code> disables the management (removal) by EPAC.</li> </ul> <p>Carefully review Managing Defender for Cloud Assignments .</p>"},{"location":"#terminology","title":"Terminology","text":"Full name Simplified use in this documentation Policy definition(s) Policy, Policies Initiative definition(s) or Policy Set definition(s) Policy Set(s) Policy Assignment(s) of a Policy or Policy Set Assignment(s) Policy Assignment(s) of a Policy Set Policy Set Assignment Policy Exemption(s) Exemption(s) Role Assignment(s)s for Managed Identities required by Policy Assignments Role Assignment(s) Policies, Policy Sets, Assignments and Exemptions Policy resources"},{"location":"#deployment-scripts","title":"Deployment Scripts","text":"<p>Three deployment scripts plan a deployment, deploy Policy resources, and Role Assignments respectively as shown in the following diagram. The solution consumes definition files (JSON and/or CSV files). The planning script (<code>Build-DeploymentPlan</code>) creates plan files (<code>policy-plan.json</code> and <code>roles-plan.json</code>) to be consumed by the two deployment steps (<code>Deploy-PolicyPlan</code> and <code>Deploy-RolesPlan</code>). The scripts require <code>Reader</code>, <code>Contributor</code> and <code>User Access Administrator</code> privileges respectively as indicated in blue text in the diagram. The diagram also shows the usual approval gates after each step/script for prod deployments.</p> <p></p> <p></p>"},{"location":"#cicd-tool-compatibility","title":"CI/CD Tool Compatibility","text":"<p>Since EPAC is based on PowerShell scripts, any CI/CD tool with the ability to execute scripts can be used. The starter kits currently include pipeline definitions for Azure DevOps and GitHub Actions. Additional starter kits are being implemented and will be added in future releases.</p>"},{"location":"#multi-tenant-support","title":"Multi-Tenant Support","text":"<p>EPAC supports single and multi-tenant deployments from a single source. In most cases you should have a fully or partially isolated area for Policy development and testing, such as a Management Group. An entire tenant can be used; however, it is not necessary since EPAC has sophisticated partitioning capabilities.</p> <p>In some multi-tenant implementations, not all policies, policy sets, and/or assignments will function in all tenants, usually due to either built-in policies that don't exist in some tenant types or unavailable resource providers.  In order to facilitate multi-tenant deployments in these scenarios, utilize the \"   epacCloudEnvironments\" property to specify which cloud type a specific file should be considered in.  For example in order to have a policy definition deployed only to epacEnvironments that are China cloud tenants, add a metadata property like this to that definition (or definitionSet) file:</p> <pre><code>\"metadata\": {\n  \"epacCloudEnvironments\": [\n    \"AzureChinaCloud\"\n  ]\n},\n</code></pre> <p>For assignment files, this is a top level property on the assignment's root node:</p> <pre><code>\"nodeName\": \"/root\",\n\"epacCloudEnvironments\": [\n    \"AzureChinaCloud\"\n],\n</code></pre>"},{"location":"#operational-scripts","title":"Operational Scripts","text":"<p>Scripts to simplify operational task are provided. Examples are:</p> <ul> <li><code>Build-PolicyDocumentation</code> generates documentation in markdown and csv formats for Policy Sets and Assignments.</li> <li><code>Create-AzRemediationTasks</code> to bulk remediate non-compliant resources for Policies with <code>DeployIfNotExists</code> or <code>Modify</code> effects.</li> </ul>"},{"location":"#understanding-epac-environments-and-the-pacselector","title":"Understanding EPAC Environments and the pacSelector","text":"<p>Note</p> <p>Understanding of this concept is crucial. Do not proceed until you completely understand the implications.</p> <p>EPAC has a concept of an environment identified by a string (unique per repository) called <code>pacSelector</code>. An environment associates the following with the <code>pacSelector</code>:</p> <ul> <li><code>cloud</code> - to select commercial or sovereign cloud environments.</li> <li><code>tenantId</code> - enables multi-tenant scenarios.</li> <li><code>rootDefinitionScope</code> - scope for custom Policy and Policy Set definition deployment.</li> <li>Optional: define <code>desiredState</code></li> </ul> <p>Note</p> <p>Policy Assignments can only defined at <code>rootDefinitionScope</code> and child scopes (recursive).</p> <p>These associations are stored in global-settings.jsonc in an element called <code>pacEnvironments</code>.</p> <p>Like any other software or IaC solution, EPAC needs areas for developing and testing new Policies, Policy Sets and Assignments before any deployment to EPAC prod environments. In most cases you will need one management group hierarchy to simulate EPAC production management groups for development and testing of Policies. EPAC's prod environment will govern all other IaC environments (e.g., sandbox, development, integration, test/qa, pre-prod, prod, ...) and tenants. This can be confusing. We will use EPAC environment(s) and IaC environment(s) to disambiguate the environments.</p> <p>In a centralized single tenant scenario, you will define two EPAC environments: epac-dev and tenant. In a multi-tenant scenario, you will add an additional EPAC environment per additional tenant.</p> <p>The <code>pacSelector</code> is just a name. We highly recommend to call the Policy development environment <code>epac-dev</code>, you can name the EPAC prod environments in a way which makes sense to you in your environment. We use <code>tenant</code>, <code>tenant1</code>, etc in our samples and documentation. These names are used and therefore must match:</p> <ul> <li>Defining the association (<code>pacEnvironments</code>) of an EPAC environment, <code>managedIdentityLocation</code> and <code>globalNotScopes</code> in <code>global-settings.jsonc</code></li> <li>Script parameter when executing different deployment stages in a CI/CD pipeline or semi-automated deployment targeting a specific EPAC environments.</li> <li><code>scopes</code>, <code>notScopes</code>, <code>additionalRoleAssignments</code>, <code>managedIdentityLocations</code>, and <code>userAssignedIdentity</code> definitions in Policy Assignment JSON files.</li> </ul>"},{"location":"#coexistence-and-desired-state-strategy","title":"Coexistence and Desired State Strategy","text":"<p>EPAC is a desired state system. It will remove Policy resources in an environment which are not defined in the definition files. To facilitate transition from previous Policy implementations and coexistence of multiple EPAC and third party Policy as Code systems, a granular way to control such coexistence is implemented. Specifically, EPAC supports:</p> <ul> <li>Centralized: One centralized team manages all Policy resources in the Azure organization, at all levels (Management Group, Subscription, Resource Group). This is the default setup.</li> <li>Distributed: Multiple teams manage Policy resources in a distributed manner. Distributed is also useful during a brownfield deployment scenario to allow for an orderly transition from pre-EPAC to EPAC.</li> </ul> <p>Desired state strategy documentation can be found here.. The short version:</p> <ul> <li><code>full</code> deletes any Policies, Policy Sets, Assignments, and Exemptions not deployed by this EPAC solution or another EPAC solution.*</li> <li><code>ownedOnly</code> deletes only Policies with this repos\u2019s pacOwnerId. This allows for a gradual transition from your existing Policy management to Enterprise Policy as Code.*</li> <li>Policy resources with another <code>pacOwnerId</code> <code>metadata</code> field are never deleted.</li> </ul> <p>Warning</p> <p>If you have a existing Policies, Policy Sets, Assignments, and Exemptions in your environment, you have not transferred to EPAC, do not forget to include the new <code>desiredState</code> element with a <code>strategy</code> of <code>ownedOnly</code>. This is the equivalent of the deprecated \"brownfield\" variable in the pipeline. The default <code>strategy</code> is <code>full</code>.</p>"},{"location":"#understanding-differences-between-usage-of-epac-azadvertizer-and-azgovviz","title":"Understanding differences between usage of EPAC, AzAdvertizer and AzGovViz","text":"<p>Enterprise Policy-as-Code (EPAC), AzAdvertizer and Azure Governance Visualizer (AzGovViz) are three distinct open source projects or tools internally developed and maintained by Microsoft employees, each helping address different needs in enterprise scale management and governance of Azure environments.</p> <ul> <li> <p>AzAdvertizer - AzAdvertizer is a publicly accessible web service that provides continually up-to-date insights on new releases and changes/updates for different Azure Governance capabilities such as Azure Policy's built-in policy and initiative (policy set) definitions, Azure aliases, Azure security &amp; regulatory compliance controls, Azure RBAC built-in role definitions and Azure resource provider operations.</p> </li> <li> <p>Azure Governance Visualizer (aka AzGovViz) - AzGovViz is an open source community project that provides visualization and reporting solution for any customer Azure environment or estate, delivering a rich set of detailed insights covering tenant management group hierarchies, RBAC assignments, Azure policy assignments, Blueprints, Azure network topology and much more. AzGovViz is listed as recommended tool in use for both Microsoft Cloud Adoption Framework (CAF) and Microsoft Well Architected Framework (WAF).</p> </li> <li> <p>Enterprise Policy-as-Code (aka EPAC) - EPAC is an open source community project that provides a CI/CD automation solution for the development, deployment, management and reporting of Azure policy at scale. EPAC can maintain a policy \"desired state\" to provide a high level of assurance in highly controlled and sensitive environments, and a means of managing policy exemptions. While it uses standard JSON file structure for its repositories, operation and maintenance of policy and policy sets can actually be done via CSV files, reducing the skill expertise needed to operate the solution once implemented.</p> </li> </ul> <p>The table below provides a summary functions/features comparison between the three solutions/tools.</p> Function/Feature AzAdvertizer AzGovViz EPAC Purpose Detailed insight tool on released Azure public cloud governance features like current built-in polices and initiatives Azure environment governance reporting and monitoring solution exposing tenant config/deployment detail of tenant hierarchies, RBAC assignments, policies, blueprints Azure environment automated policy governance deployment, management and reporting solution Implementation hosted web service customer deployment, interactive Azure governance management and security reporting tool customer deployment, deployment automation and reporting tool Requirements browser PowerShell 7.0.3 PowerShell 7.3.1"},{"location":"#support","title":"Support","text":"<p>Please raise issues via the GitHub repository.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>This project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.opensource.microsoft.com.</p> <p>When you submit a pull request, a CLA bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.</p> <p>This project has adopted the Microsoft Open Source Code of Conduct. For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments.</p>"},{"location":"#trademarks","title":"Trademarks","text":"<p>This project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft trademarks or logos is subject to and must follow Microsoft's Trademark &amp; Brand Guidelines. Use of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship. Any use of third-party trademarks or logos are subject to those third-party's policies.</p>"},{"location":"ci-cd-ado-pipelines/","title":"Azure DevOps Pipelines","text":"<p>This page covers the specifics for Azure DevOps (ADO) pipelines. It si based on a simplified GitHub Flow as documented in CI/CD Overview</p> <p>Previously setup App Registrations are a pre-requisite.</p> <p>This repository contains starter pipelines</p> <ul> <li>Azure DevOps (Single Tenant)</li> <li>Azure DevOps (Multi Tenant)</li> <li>Azure DevOps (Simplified)</li> </ul>"},{"location":"ci-cd-ado-pipelines/#service-connections-for-azure-devops-cicd","title":"Service connections for Azure DevOps CI/CD","text":"<p>Create ADO service connections for each of the previously created App Registrations. You will need to retrieve the client id and create a client secret or authenticate with a X509 certificate configured for the SPN.</p> <p>When creating a Service Connection in Azure DevOps you can set up the service connections on a Subscription or a Management Group scope level. If you are using subscriptions to simulate a hierarchy during EPAC development, configure the service connection(s) scope level as Subscription. When creating a Service Connections for management groups (any EPAC environments) Deployment and EPAC Role Assignment the service connection scope level is Management Group.</p> Subscription scope level Management Group scope level"},{"location":"ci-cd-ado-pipelines/#single-tenant-pipeline","title":"Single Tenant Pipeline","text":""},{"location":"ci-cd-ado-pipelines/#single-tenant-stages","title":"Single Tenant Stages","text":"Stage Purpose Trigger Scripts devStage Feature branch DEV environment build, deploy and test CI, Manual Build-DeploymentPlans.ps1  Deploy-PolicyPlan.ps1  Deploy-RolesPlan.ps1 tenantPlanFeatureStage Feature branch based plan for prod deployment CI, Manual Build-DeploymentPlans.ps1 tenantPlanMainStage Main branch based plan for prod deployment PR Merged, Manual Build-DeploymentPlans.ps1 tenantDeployStage Deploy Policies defined by Main branch based plan Prod stage approved Deploy-PolicyPlan.ps1 tenantRolesStage Assign roles defined by Main branch based plan Role stage approved Deploy-RolesPlan.ps1"},{"location":"ci-cd-ado-pipelines/#single-tenant-service-connections-and-roles","title":"Single Tenant Service Connections and Roles","text":"<p>Create Service Principals and associated service connections in Azure DevOps or the equivalent in your CI/CD tool. The SPNs require the following roles to adhere to the least privilege principle. If you have a single tenant, remove the last column and rows with connections ending in \"-2\".</p> Connection Stages MG: epac-dev-mg MG: Tenant Root sc-pac-dev devStage Owner  MS Graph Permissions sc-pac-plan tenantPlanFeatureStage  tenantPlanMainStage EPAC Policy Reader  MS Graph Permissions sc-pac-prod tenantDeployStage Policy Contributor sc-pac-roles tenantRolesStage-1 User Access Administrator  MS Graph Permissions"},{"location":"ci-cd-ado-pipelines/#multi-tenant-pipeline","title":"Multi Tenant Pipeline","text":""},{"location":"ci-cd-ado-pipelines/#multi-tenant-stages","title":"Multi Tenant Stages","text":"Stage Purpose Trigger Scripts devStage Feature branch EPAC DEV environment build, deploy and test CI, Manual Build-DeploymentPlans.ps1  Deploy-PolicyPlan.ps1  Deploy-RolesPlan.ps1 tenantPlanFeatureStage-1 Feature branch based plan for prod deployment (tenant 1) CI, Manual Build-DeploymentPlans.ps1 tenantPlanFeatureStage-2 Feature branch based plan for prod deployment (tenant 2) CI, Manual Build-DeploymentPlans.ps1 completedFeature Empty stage to complete feature branch None None tenantPlanMainStage-1 Main branch based plan for prod deployment (tenant 1) PR Merged, Manual Build-DeploymentPlans.ps1 tenantDeployStage-1 Deploy Policies defined by Main branch based plan (tenant 1) Prod stage approved Deploy-PolicyPlan.ps1 tenantRolesStage-1 Assign roles defined by Main branch based plan (tenant 1) Role stage approved Deploy-RolesPlan.ps1 tenantPlanMainStage-2 Main branch based plan for prod deployment (tenant 2) PR Merged, Manual Build-DeploymentPlans.ps1 tenantDeployStage-2 Deploy Policies defined by Main branch based plan (tenant 2) Prod stage approved Deploy-PolicyPlan.ps1 tenantRolesStage-2 Assign roles defined by Main branch based plan (tenant 2) Role stage approved Deploy-RolesPlan.ps1"},{"location":"ci-cd-ado-pipelines/#multi-tenant-service-connections-and-roles","title":"Multi Tenant Service Connections and Roles","text":"<p>Create Service Principals and associated service connections in Azure DevOps or the equivalent in your CI/CD tool. The SPNs require the following roles to adhere to the least privilege principle. If you have a single tenant, remove the last column and rows with connections ending in \"-2\".</p> Connection Stages MG: epac-dev-mg MG: Tenant 1 Root MG: Tenant 2 Root sc-pac-dev devStage Owner  MS Graph Permissions sc-pac-plan-1 tenantPlanFeatureStage-1  tenantPlanMainStage-1 EPAC Policy Reader  MS Graph Permissions sc-pac-plan-2 tenantPlanFeatureStage-2  tenantPlanMainStage-2 EPAC Policy Reader  MS Graph Permissions sc-pac-prod-1 tenantDeployStage-1 Policy Contributor sc-pac-prod-2 tenantDeployStage-2 Policy Contributor sc-pac-roles-1 tenantRolesStage-1 User Access Administrator sc-pac-roles-2 tenantRolesStage-2 User Access Administrator none completedPlanFeatureStage"},{"location":"ci-cd-ado-pipelines/#azure-devops-simplified-pipeline","title":"Azure DevOps (Simplified Pipeline)","text":"<p>If you have less complex requirements for a pipeline deployment using Azure DevOps you can utilize the <code>simplified-pipeline.yaml</code> file and the <code>templates</code> folder in the <code>StarterKit</code> folder to quickly get started in Azure Pipelines.</p> <p>This template requires the creation of two environments in Azure Pipelines and can easily have approvals added for deployment control.</p>"},{"location":"ci-cd-ado-pipelines/#deployment-environments","title":"Deployment Environments","text":"<p>Create distinct ADO environment to configure approval gates. Refer to the following documentation:  https://docs.microsoft.com/en-us/azure/devops/pipelines/process/environments?view=azure-devops</p>"},{"location":"ci-cd-ado-pipelines/#pipeline-execution","title":"Pipeline Execution","text":"<p>In Azure Devops pipelines the following happens. Your CI/CD tools will display progress differently.</p>"},{"location":"ci-cd-ado-pipelines/#commit-to-a-feature-branch-or-a-manual-pipeline-run","title":"<code>Commit</code> to a feature branch or a manual pipeline run","text":"<ul> <li>Stage devStage to deploy Policies, Policy Sets and Policy Assignments to the PAC DEV environment.</li> <li>Calculates the plan for PROD environment deployment based on the Feature branch.</li> <li>This plan is never executed. Instead the logs and if desired the artifact generated are used by the developer to verify the definition files and to determine if the code is ready for a Pull Request.</li> <li>The PR approver(s) will use the same input plus the source code changes to decide the PR approval or rejection.</li> </ul> <p>Detail view:</p> <p></p>"},{"location":"ci-cd-ado-pipelines/#pull-request-is-approved-and-branch-merged-into-main","title":"<code>Pull Request</code> is approved and branch merged into main","text":"<ul> <li>Calculates the plan for PROD environment deployment based on the merged Main branch.</li> <li>The pipeline stops for PROD gate(s) approval at this time.</li> <li>The logs and if desired the artifacts generated are used by the PROD gate(s) approver(s) to decide on the PROD stage approval(s) or rejection(s).</li> <li></li> <li></li> <li>After the approval deployments to PROD will begin.</li> <li>Optional a second approval before role assignments is required.</li> <li></li> <li>After the ntire run the overview page looks like this:</li> <li></li> </ul>"},{"location":"ci-cd-ado-pipelines/#no-changes","title":"No changes","text":"<ul> <li>Deployment steps and stages are skipped. Skipped stages do not need approvals.</li> <li></li> </ul>"},{"location":"ci-cd-app-registrations/","title":"App Registrations Setup","text":"<p>CI/CD pipelines/workflows require the creation of App Registrations in your Entra ID (Azure AD) tenants. The App Registrations are used by the EPAC pipeline to deploy the EPAC Management Group and the EPAC Management Group Policy Definitions.</p> <p>The following screenshot shows the Management Group hierarchy that used for the App Registrations.</p> <p></p>"},{"location":"ci-cd-app-registrations/#custom-epac-resource-policy-reader-role","title":"Custom <code>EPAC Resource Policy Reader Role</code>","text":"<p>EPAC uses a set of Entra ID App Registrations (Service Principals). To build the deployment plan and adhere to the least-privilege-principle, a Resource Policy Reader role is required. This role is not built-in. EPAC contains script <code>New-AzPolicyReaderRole.ps1</code> to create this role or you can use the below JSON in Azure Portal.</p> <pre><code>{\n    \"properties\": {\n        \"roleName\": \"EPAC Resource Policy Reader\",\n        \"description\": \"Provides read access to all Policy resources for the purpose of planning the EPAC deployments.\",\n        \"assignableScopes\": [\n            \"/\"\n        ],\n        \"permissions\": [\n            {\n                \"actions\": [\n                    \"Microsoft.Authorization/policyassignments/read\",\n                    \"Microsoft.Authorization/policydefinitions/read\",\n                    \"Microsoft.Authorization/policyexemptions/read\",\n                    \"Microsoft.Authorization/policysetdefinitions/read\",\n                    \"Microsoft.PolicyInsights/*\",\n                    \"Microsoft.Management/register/action\",\n                    \"Microsoft.Management/managementGroups/read\"\n                ],\n                \"notActions\": [],\n                \"dataActions\": [],\n                \"notDataActions\": []\n            }\n        ]\n    }\n}\n</code></pre>"},{"location":"ci-cd-app-registrations/#create-single-app-registration-and-role-assignments-for-epac-dev","title":"Create single App Registration and Role assignments for <code>epac-dev</code>","text":"<p>Create the App Registrations for:</p> <ul> <li>epac-dev environment with Owner rights to the epac-dev Management Group</li> <li>Optional: epac-test environment with Owner rights to the epac-test Management Group (repeat the steps below for epac-test)</li> </ul>"},{"location":"ci-cd-app-registrations/#create-the-app-registration-for-epac-dev-environment","title":"Create the App Registration for <code>epac-dev</code> environment","text":""},{"location":"ci-cd-app-registrations/#grant-the-app-registration-the-necessary-microsoft-graph-permissions","title":"Grant the App Registration the necessary Microsoft Graph permissions","text":""},{"location":"ci-cd-app-registrations/#grant-the-app-registration-the-necessary-azure-owner-permissions-for-the-epac-management-group","title":"Grant the App Registration the necessary Azure <code>Owner</code> permissions for the epac Management Group","text":""},{"location":"ci-cd-app-registrations/#create-app-registrations-and-role-assignments-for-prod-environments-per-tenant","title":"Create App Registrations and Role assignments for prod environments (per tenant)","text":""},{"location":"ci-cd-app-registrations/#app-registration-with-permissions-to-read-policy-resources-and-azure-roles","title":"App Registration  with permissions to read Policy resources and Azure roles","text":""},{"location":"ci-cd-app-registrations/#create-the-app-registration-the-same-as-above-with-the-same-microsoft-graph-permissions","title":"Create the App Registration the same as above with the same Microsoft Graph permissions","text":""},{"location":"ci-cd-app-registrations/#create-custom-azure-role-with-permissions-to-read-policy-resources","title":"Create custom Azure role with permissions to read Policy resources","text":""},{"location":"ci-cd-app-registrations/#grant-the-app-registration-the-custom-azure-role-at-the-root-management-group","title":"Grant the App Registration the custom Azure role at the root Management Group","text":""},{"location":"ci-cd-app-registrations/#app-registration-with-permissions-to-deploy-policy-resources","title":"App Registration with permissions to deploy Policy resources","text":""},{"location":"ci-cd-app-registrations/#create-the-app-registration-without-microsoft-graph-permissions","title":"Create the App Registration without Microsoft Graph permissions","text":""},{"location":"ci-cd-app-registrations/#grant-the-app-registration-the-resourcepolicy-contributor-role-at-the-root-management-group","title":"Grant the App Registration the <code>ResourcePolicy Contributor</code> role at the root Management Group","text":""},{"location":"ci-cd-app-registrations/#app-registration-with-permissions-to-assign-roles-at-root-management-group","title":"App Registration with permissions to assign Roles at root Management Group","text":""},{"location":"ci-cd-app-registrations/#create-the-app-registration-the-same-as-above-with-the-same-microsoft-graph-permissions_1","title":"Create the App Registration the same as above with the same Microsoft Graph permissions","text":""},{"location":"ci-cd-app-registrations/#grant-the-app-registration-the-user-access-administrator-role-at-the-root-management-group","title":"Grant the App Registration the <code>User Access Administrator</code> role at the root Management Group","text":""},{"location":"ci-cd-github-actions/","title":"Github Actions","text":"<p>The starter kit contains a sample pipeline to use GitHub Actions to deploy Enterprise Policy as Code. It features a review process and is driven by pull requests and approvals.</p> <p>We have revised our approach to GitHub Actions simplifying the process and make it easier to understand. The new approach is documented below and is included in the starter kit with v8.5 and later.</p> <p>The previous version is still available in the starter kit in folder <code>Legacy</code> and the documentation is retained after the documentation for the new approach.</p>"},{"location":"ci-cd-github-actions/#setup-in-github","title":"Setup in GitHub","text":""},{"location":"ci-cd-github-actions/#create-github-deployment-environments","title":"Create GitHub Deployment Environments","text":"<p>You will need one GitHub deployment environment for the <code>epac-dev</code> workflow and three environments each for your epac-prod or tenant workflows. This documentation assumes the include starter kit pipelines.</p> Environment Purpose App Registration (SPN) EPAC-DEV Plan and deploy to <code>epac-dev</code> ci-cd-epac-dev-owner TENANT-PLAN Build deployment plan for <code>tenant</code> ci-cd-root-policy-reader TENANT-DEPLOY-POLICY Deploy Policy resources for <code>tenant</code> ci-cd-root-policy-contributor TENANT-DEPLOY-ROLES Deploy Roles for <code>tenant</code> ci-cd-root-user-assignments <p>For each environment, add to the environment secrets for the tenant id, client id and client secret for the SPN. The secrets must be named <code>TENANT_ID</code>, <code>CLIENT_ID</code> and <code>CLIENT_SECRET</code> respectively.</p>"},{"location":"ci-cd-github-actions/#hardening-each-environment","title":"Hardening each Environment","text":"<ul> <li>Global setting for the repo: protect the <code>main</code> branch with branch protection rules.</li> <li>Configure required reviewers for TENANT-DEPLOY-POLICY and TENANT-DEPLOY-ROLES environments.</li> <li>Restrict branch to <code>main</code> branch for TENANT-DEPLOY-POLICY and TENANT-DEPLOY-ROLES environments.</li> <li>Do not allow administrators to bypass configured protection rules for TENANT-DEPLOY-POLICY and TENANT-DEPLOY-ROLES environments.</li> </ul>"},{"location":"ci-cd-github-actions/#new-github-workflows","title":"New GitHub Workflows","text":"<p>Each of the workflows has three (3) jobs: * <code>Build</code> - Builds the deployment plan * <code>Deploy Policy</code> - Deploys the policy plan * <code>Deploy Roles</code> - Deploys the role plan</p> <p>The starter kit contains the following workflows:</p> <ul> <li><code>epac-dev.yaml</code> is the workflow for the <code>epac-dev</code> environment. It is triggered on push to any <code>feature/**</code> branch.</li> <li><code>tenant.yaml</code> is the workflow for the <code>epac-prod</code> or <code>tenant</code> environments. It is triggered on PR closed to the <code>main</code> branch.</li> </ul>"},{"location":"ci-cd-github-actions/#testing-your-workflows","title":"Testing your Workflows","text":"<p>To test the actions make a change to a file in the definitions folder.</p>"},{"location":"ci-cd-github-actions/#previous-cicd-workflow-legacy","title":"Previous CI/CD Workflow -- Legacy","text":"<p>This section is retained from the previous documentation to enable you to continue using the previous approach. It is recommended that you migrate to the new approach as soon as possible.</p>"},{"location":"ci-cd-github-actions/#action-flow-legacy","title":"Action Flow -- Legacy","text":"<ol> <li>Changes are made to files in the Definitions folder (e.g. new policy definition/assignment, removing files) and pushed to GitHub</li> <li>The <code>Build Deployment Plan</code> action is triggered. This runs the <code>Build-DeploymentPlans</code> function against the environment specified in the <code>pacEnvironment</code> variable in <code>global-settings.jsonc</code></li> <li>If there are changes detected the plan is committed to a new branch and a pull request is created. A label of <code>PolicyDeployment</code> is attached and a reviewer is added.</li> <li>At this stage you can browse the plan created by the action before approving. It is important to not merge this branch as it will remove the <code>.gitignore</code> file from the base branch and will cause the <code>Output</code> folder to be permanently committed to the project.</li> <li>If the changes are ready to be deployed - the pull request must be approved.</li> <li>The approval action will start the <code>Deploy Policy Plan and Roles</code> workflow.</li> <li>The policy plan will be deployed using <code>Deploy-RolesPlan</code>. When this is complete one of two things can happen.<ul> <li>If there are no role changes to be processed the PR is closed (not merged) and the branch containing the plan is deleted. (End of process)</li> <li>If there are role changes a label of <code>RoleDeployment</code> is added - and the reviewer is removed and re-added. This triggers another review on the pipeline which must be approved before role changes are deployed.</li> </ul> </li> <li>For role changes when the PR is approved again the same action runs - this time using the <code>Deploy-RolesPlan</code> for deployment.</li> <li>When complete the PR is closed and the branch containing the plan is deleted.</li> </ol> <p>Note</p> <p>This is a sample method of deploying policy and role changes - feel free to modify it to suit your environment and contribute to this project if you want to share an update.</p>"},{"location":"ci-cd-github-actions/#setup-in-github-legacy","title":"Setup in GitHub -- Legacy","text":"<p>There are some steps to be performed in GitHub to ensure the action runs correctly.</p> <ol> <li>Create two labels in the project called <code>PolicyDeployment</code> and <code>RoleDeployment</code>. Instructions to create new labels are here.</li> <li> <p>Create secrets representing an SPN in GitHub for the repository as below - these are used to authenticate to Azure</p> Secret Name Value CLIENT_ID Application ID for SPN CLIENT_SECRET Client secret TENANT_ID Azure AD Tenant SUBSCRIPTION_ID Any subscription ID. Used to login but not in the process </li> <li> <p>In the <code>.github\\workflows\\build.yaml</code> and <code>.github\\workflows\\deploy.yaml</code> file updated the <code>env:</code> section as below.</p> Environment Variable Name Value Notes REVIEWER Add a GitHub user to review the PR definitionsRootFolder The folder containing <code>global-settings.jsonc</code> and definitions pacEnvironment The policy as code environment specified in <code>global-settings.jsonc</code> planFolder A folder that plans will be saved to and deployed from Must be the same folder in <code>deploy.yaml</code> </li> <li> <p>In the <code>.github\\workflows\\build.yaml</code> and <code>.github\\workflows\\deploy.yaml</code> file updated the trigger's path setting to ensure it is triggered when a file change is made.</p> </li> </ol>"},{"location":"ci-cd-github-actions/#skipping-a-workflow-run-legacy","title":"Skipping a Workflow Run -- Legacy","text":"<p>To skip the workflow run add a file called <code>NO_ACTIONS</code> in the definitions folder. An action will be started on push however the build will not occur.</p>"},{"location":"ci-cd-github-actions/#generating-build-results-only-legacy","title":"Generating Build Results Only -- Legacy","text":"<p>If you want to run just the <code>Build-DeploymentPlans</code> but not save the output - add a file called <code>NO_DEPLOY</code>. This will run the build step and then cancel the action. You can review the summary output by checking the logs in the cancelled action.</p>"},{"location":"ci-cd-overview/","title":"CI/CD Overview","text":"<p>This page covers the general CI/CD documentation.</p> <p>This repository contains starter pipelines</p> <ul> <li>Azure DevOps Pipelines</li> <li>GitHub Actions</li> </ul> <p>The authors are interested in supporting other deployment pipelines. If you have developed pipelines for other technologies, such as GitLab, Jenkins, etc., please contribute them to the project as additional starter kits.</p>"},{"location":"ci-cd-overview/#simplified-github-flow-for-policy-as-code","title":"Simplified <code>GitHub Flow</code> for Policy as Code","text":"<p>The diagram below shows the use of GitHub Flow in Policy as Code. The diagram uses GitHub workflow terminology; however, the concepts apply equally to other CI/CD technologies. Detailed instructions for  Azure DevOps Pipelines and GitHub Actions are provided.</p> <p>The flow shown in the diagram contains the following steps:</p> <ol> <li>Developers create feature branches from <code>main</code> branch.</li> <li>Developers create or update Policy definitions, Policy Set definitions, and Policy Assignment files in the <code>Definitions</code> folder. Developers push changes to the feature branch.</li> <li>The CI/CD pipeline/action is triggered from the push to the feature branch. We recommend to use a single App Registration (SPN) to execute pipeline/action. The SPN must have <code>Owner</code> rights to the <code>epac-dev</code> Management Group and the Microsoft Graph permissions described below. The steps are:<ul> <li>Build-DeploymentPlans.ps1 to calculate the deployment plan</li> <li>Deploy-PolicyPlan.ps1 to deploy the plan's Policy Resources</li> <li>Deploy-RolesPlan.ps1 to create the role assignments for the Managed Identities required for <code>DeployIfNotExists</code> and <code>Modify</code> Policies.</li> </ul> </li> <li>Steps 1 to 3 are repeated during the development process.</li> <li>When the feature is ready, the developer creates a Pull Request (PR) to merge the feature branch into the <code>main</code> branch. The merge of the PR into the <code>main</code> branch triggers the CI/CD pipeline/action (step 5) to deploy the changes to the <code>prod</code> environment. </li> <li>Since these deployments are most often deployed at the pseudo root of the tenant, we recommend creating a separate App Registration (SPN) for each of the 3 steps with roles assigned in line with the least privilege principle. The steps are:<ul> <li>Build-DeploymentPlans.ps1 to calculate the deployment plan. SPN must have <code>EPAC Resource Policy Reader</code> custom role on the root or pseudo-root management group and the Microsoft Graph permissions described below.</li> <li>Approval gate for Policy resources deployment.</li> <li>Deploy-PolicyPlan.ps1 to deploy the plan's Policy Resources. SPN must have <code>Resource Policy Contributor</code> built-in role on the root or pseudo-root management group. Microsoft Graph permissions are not required.</li> <li>Approval gate for Role assignments deployment.</li> <li>Deploy-RolesPlan.ps1 to create the role assignments for the Managed Identities required for <code>DeployIfNotExists</code> and <code>Modify</code> Policies. SPN must have <code>User Access Administrator</code> built-in role on the root or pseudo-root management group and the Microsoft Graph permissions described below.</li> </ul> </li> <li>Action  through 3 within step 8 above are repeated for additional tenants in a multi-tenant scenario.</li> </ol> <p></p>"},{"location":"ci-cd-overview/#github-flow-variations","title":"<code>GitHub</code> Flow Variations","text":"<p>EPAC can handle any flow you like. For <code>GitHub Flow</code>, the following variations are possible. WE do not recommend this approach since the additional calculations rarely yield any insights.:</p> <ul> <li>Adding a deployment plan from the feature branch to the production environment in step 3 above during the development process (see steps 1 through 3 in the diagram above) by adding a step using Build-DeploymentPlans.ps1. This is useful to test the deployment plan in the production environment before creating a PR. We recommend using a separate SPN for this step (job).</li> <li>PR creation trigger for a CI/CD pipeline/action deploy the changes to an <code>epac-test</code> environment with the same steps as the deployment to <code>epac-dev</code> environment in steps 3 above.</li> </ul>"},{"location":"ci-cd-overview/#deployment-scripts","title":"Deployment Scripts","text":"<p>While this script intended to be used in CI/CD, they can be run manually to create a semi-automated EPAC solution. This is useful:</p> <ul> <li>CI/CD environment is not yet available.</li> <li>Debugging the scripts from Visual Studio Code.</li> </ul> <p>Deployment scripts require permissions to the Azure environment and Microsoft Graph API. In a CI/CD scenario, App Registration (SPNs) are used to execute the scripts. These identities must be granted the necessay permissions as documented in App Registrations Setup. In a semi-automated scenario, the user executing the scripts must have the necessary permissions. The scripts will prompt for the necessary permissions.</p> <p>The image below shows the scripts and the roles required for their execution.</p> <ul> <li><code>Build-DeploymentPlans.ps1</code> requires <code>EPAC Resource Policy Reader</code> custom role on the root or pseudo-root management group and the Microsoft Graph permissions described below.</li> <li><code>Deploy-PolicyPlan.ps1</code> requires <code>Resource Policy Contributor</code> built-in role on the root or pseudo-root management group. Microsoft Graph permissions are not required.</li> <li><code>Deploy-RolesPlan.ps1</code> requires <code>User Access Administrator</code> built-in role on the root or pseudo-root management group and the Microsoft Graph permissions described below.</li> </ul> <p>Furthermore, it shows the consumption of the <code>Definitions</code> files by script Build-DeploymentPlans.ps1 and output of two plan files (Policy and Roles). The plan files are subsequently used by the deployment scripts <code>Deploy-PolicyPlan.ps1</code> and <code>Deploy-RolesPlan.ps1</code>.</p> <p></p>"},{"location":"ci-cd-overview/#common-script-parameters","title":"Common Script Parameters","text":"Parameter Explanation <code>PacEnvironmentSelector</code> Selects the EPAC environment for this plan. If omitted, interactively prompts for the value. <code>DefinitionsRootFolder</code> Definitions folder path. Defaults to environment variable <code>$env:PAC_DEFINITIONS_FOLDER</code> or <code>./Definitions</code>. It must contain file <code>global-settings.jsonc</code>. <code>Interactive</code> Defaults to <code>$false</code>."},{"location":"ci-cd-overview/#build-deploymentplansps1","title":"Build-DeploymentPlans.ps1","text":"<p>Analyzes changes in Policy definition, Policy Set definition, and Policy Assignment files. It calculates a plan to apply deltas. The deployment scripts are declarative and idempotent: this means, that regardless how many times they are run, they always push all changes that were implemented in the JSON files to the Azure environment, i.e. if a JSON file is newly created/updated/deleted, the pipeline will create/update/delete the Policy and/or Policy Set and/or Policy Assignments definition in Azure. If there are no changes, the pipeline can be run any number of times, as it won't make any changes to Azure.</p> <p>In addition to the common parameters, these parameters are defined:</p> Parameter Explanation <code>OutputFolder</code> Output folder path for plan files. Defaults to environment variable <code>$env:PAC_OUTPUT_FOLDER</code> or <code>./Output</code>. <code>DevOpsType</code> If set, outputs variables consumable by conditions in a DevOps pipeline. Default: not set."},{"location":"ci-cd-overview/#deploy-policyplanps1","title":"Deploy-PolicyPlan.ps1","text":"<p>Deploys Policies, Policy Sets, Policy Assignments, and Policy Exemptions at their desired scope based on the plan.</p> Parameter Explanation <code>InputFolder</code> Input folder path for plan files. Defaults to environment variable <code>$env:PAC_INPUT_FOLDER</code>, <code>$env:PAC_OUTPUT_FOLDER</code> or <code>./Output</code>."},{"location":"ci-cd-overview/#deploy-rolesplanps1","title":"Deploy-RolesPlan.ps1","text":"<p>Creates the role assignments for the Managed Identities required for <code>DeployIfNotExists</code> and <code>Modify</code> Policies.</p> Parameter Explanation <code>InputFolder</code> Input folder path for plan files. Defaults to environment variable <code>$env:PAC_INPUT_FOLDER</code>, <code>$env:PAC_OUTPUT_FOLDER</code> or <code>./Output</code>."},{"location":"clone-github/","title":"Alternate Script Installation cloning the GitHub Repository","text":"<p>Instead of installing <code>EnterprisePolicyAsCode</code> from the PowerShell Gallery, you can clone the GitHub repository and use the scripts described below to install the script source code. This is useful, if your organization has overly restrictive policies on installing PowerShell modules from the PowerShell Gallery. It can also be usefule if you want to contribute EPAC source code to the project.</p>"},{"location":"clone-github/#setting-up-your-repo","title":"Setting up your Repo","text":"<ol> <li>Initial setup<ol> <li>Create <code>MyForkRepo</code> as a fork of GitHub repo.</li> <li>Create <code>MyWorkingRepo</code>.         1. Clone your forked repo.         1. Create a new repo from the clone (do not fork <code>MyForkRepo</code>)</li> </ol> </li> <li>Work in <code>MyWorkingRepo</code><ol> <li>While the root folder is not modified as part of the Sync-Repo process, it is recommended that this part of the file structure not be used for storage of any custom material other than new folders.<ol> <li>You may add additional folders, such as a folder for your own operational scripts.</li> </ol> </li> <li>Use only folders <code>Definitions</code> and <code>Pipeline</code>, except when working on fixes to be contributed back to GitHub.<ol> <li>Review the <code>Sync-Repo.ps1</code> documentation for additional information on the folders which are destroyed and recreated as part of the version upgrade process for additional insight on this topic.</li> </ol> </li> </ol> </li> </ol>"},{"location":"clone-github/#syncing-latest-version-from-github-repo","title":"Syncing latest Version from GitHub repo","text":"<ol> <li>Fetch changes from GitHub to <code>MyForkRepo</code>.</li> <li>Execute <code>Sync-Repo.ps1</code> to copy files from <code>MyForkRepo</code> to <code>MyWorkingRepo</code> feature branch.</li> <li>PR <code>MyWorkingRepo</code> feature branch.</li> </ol>"},{"location":"clone-github/#contribute-to-github","title":"Contribute to GitHub","text":"<ol> <li>Execute <code>Sync-Repo.ps1</code> to copy files from <code>MyWorkingRepo</code> to <code>MyForkRepo</code> feature branch.<ol> <li>Be sure not to copy internal references within your files during your sync to MyForkRepo.</li> </ol> </li> <li>PR <code>MyForkRepo</code> feature branch.</li> <li>PR changes in your fork (<code>MyForkRepo</code>) to GitHub.</li> <li>GitHub maintainers will review the PR.</li> </ol>"},{"location":"clone-github/#sync-repops1-sync-fromghps1-sync-toghps1","title":"Sync-Repo.ps1, Sync-FromGH.ps1, Sync-ToGH.ps1","text":""},{"location":"clone-github/#sync-repops1","title":"Sync-Repo.ps1","text":"<p>The repo contains script to synchronize directories in both directions: <code>Sync-Repo.ps1</code>. It only works if you do not modify:</p> <ul> <li><code>Docs</code>, <code>Scripts</code>, <code>Module</code> and <code>StarterKit</code> directories</li> <li><code>*.md</code>, <code>*.ps1</code>, <code>*.yml</code>, and <code>LICENSE</code> files in repo root directory</li> </ul> Parameter Required Explanation <code>SourceDirectory</code> Required Directory with the source (forked repo) <code>DestinationDirectory</code> Required Directory with the destination (your private repo) <code>SuppressDeleteFiles</code> Optional Switch parameter to suppress deleting files in <code>$destinationDirectory</code> tree"},{"location":"clone-github/#sync-fromghps1-and-sync-toghps1","title":"Sync-FromGH.ps1 and Sync-ToGH.ps1","text":"<p>Sync-FromGH.ps1 and Sync-ToGH.ps1 are a wrapper around Sync-Repo.ps1 used by the EPAC maintainers to simplify syncing their development repo <code>epac-development</code> and the GitHub repo <code>enterprise-azure-policy-as-code</code>.</p>"},{"location":"clone-github/#process-for-development-maintainers-only","title":"Process for Development (Maintainers Only)","text":""},{"location":"clone-github/#syncing-latest-version-from-github-repo-to-epac-development-repo","title":"Syncing latest Version from GitHub repo to <code>epac-development</code> repo","text":"<ul> <li>Create a branch in <code>epac-development repo</code> named <code>feature/sync-from-github</code></li> <li>Sync GitHub enterprise main branch with <code>Sync-Repo.ps1</code></li> <li>Verify changes</li> <li>Commit changes to <code>epac-development</code> branch <code>feature/sync-from-github</code></li> <li>Test and PR <code>epac-development</code> branch <code>feature/sync-from-github</code> to <code>epac-development</code> main branch</li> <li>Delete <code>epac-development</code> branch <code>feature/sync-from-github</code></li> </ul>"},{"location":"clone-github/#development-in-epac-development-repo","title":"Development in <code>epac-development</code> repo","text":"<ul> <li>Each developer owns</li> <li>Management Group in the <code>epac-development</code> tenant</li> <li>Folder in the <code>Test</code> folder, <code>pipeline.yml</code>, and <code>Set-EnvironmentVariables.ps1</code> in the <code>epac-development</code> repo</li> <li><code>Set-EnvironmentVariables.ps1</code> in your Test folder is used to set the environment variables for your <code>Test</code> folders. This is required for interactively using the scripts.</li> <li>Create a feature branch in <code>epac-development</code> repo named <code>feature/&lt;your-name&gt;/&lt;github-issue-number&gt;</code></li> <li>Make and test changes</li> <li>PR <code>epac-development</code> branch <code>feature/&lt;your-name&gt;/&lt;github-issue-number&gt;</code> to <code>epac-development</code> main branch</li> <li>Validate \"prod\" build in <code>epac-development</code> tenant</li> <li>Delete branch <code>feature/&lt;your-name&gt;/&lt;github-issue-number&gt;</code></li> <li>Fetch main branch from <code>epac-development</code> repo</li> <li>Create a branch in GitHub <code>enterprise-policy-as-code</code> repo from the issue you working on.</li> <li>Fetch that branch in VS Code</li> <li>Sync <code>enterprise-policy-as-code</code> repo with <code>Sync-Repo.ps1</code> from epac-development repo</li> <li>Commit changes to <code>enterprise-policy-as-code</code> branch created above</li> <li>validate the changes for conflicts</li> <li>PR <code>enterprise-policy-as-code</code> branch created above to the main branch</li> <li>Create a release in GitHub <code>enterprise-policy-as-code</code> repo</li> <li>Delete the branch in <code>enterprise-policy-as-code</code> repo</li> </ul>"},{"location":"code-promotion-module-release-process/","title":"EPAC Development to Production Promotion Process","text":"<p>A guide for maintainers on how to move internal EPAC development (ADO) to production (GitHub).</p> <p>Assumption: You have completed PR in for EPAC Development in ADO (https://secinfra.visualstudio.com/_git/epac-development) and are ready to release to public GitHub EPAC project.</p> <p>You are using known local path names for EPAC Development repo and GitHub repo, for example:</p> <p>EPAC Development local repo: <code>C:\\GitRepoClones\\epac-development</code> EPAC GitHub local repo: <code>C:\\GitRepoClones\\enterprise-azure-policy-as-code</code></p>"},{"location":"code-promotion-module-release-process/#code-promotion-process","title":"Code Promotion Process","text":"<ol> <li> <p>Create a branch in GitHub (https://github.com/Azure/enterprise-azure-policy-as-code).</p> </li> <li> <p>Update local production repo with content from local development repo. In local VS code repo for EPAC GitHub, open terminal:    <code>PS C:\\GitRepoClones\\enterprise-azure-policy-as-code&gt; .\\Sync-ToGH.ps1</code>.</p> </li> <li> <p>Commit changes and sync.</p> </li> <li> <p>Go to https://github.com/Azure/enterprise-azure-policy-as-code, go to <code>Compare and Pull Request</code></p> </li> <li> <p>Add PR title and create PR.</p> </li> <li> <p>Complete GitHub Review and merge PR process.</p> </li> <li> <p>Delete branch from GitHub.</p> </li> <li> <p>Go to VSCode for EPAC Release (GitHub) (ex <code>C:\\GitRepoClones\\enterprise-azure-policy-as-code</code>) In Source Control, select main branch. Move to Remotes and fetch, then sync changes.</p> </li> <li> <p>Move to branches, delete local branch (force delete may be required).</p> </li> <li> <p>Open terminal, type <code>git remote prune origin</code></p> </li> </ol>"},{"location":"code-promotion-module-release-process/#module-release-process","title":"Module Release Process","text":"<p>This is a guide on how to release a new version of the project - including automated PowerShell module publish. It is used by the EPAC maintainers only.</p>"},{"location":"code-promotion-module-release-process/#github-release-process","title":"GitHub Release Process","text":"<ol> <li>Navigate to https://github.com/Azure/enterprise-azure-policy-as-code/releases</li> <li>Click on Draft a new release</li> <li>Click on Choose a tag and enter in the new release version - it should be in the format \"v(major).(minor).(build)\" i.e. v7.3.4 Don't forget the v</li> <li>When prompted click on Create new tag: vX.X.X on publish</li> <li>Add a release title - you can just use the new version number.</li> <li>Click on Generate release notes to pull all the notes in from related PRs. Update if necessary.</li> <li>Click Publish Release</li> </ol> <p>Now just verify the module publish action has run</p>"},{"location":"code-promotion-module-release-process/#verify-action","title":"Verify Action","text":"<ol> <li>Click on Actions</li> <li>Verify that a workflow run has started with the same name as the release.</li> </ol> <p>It should finish successfully - if there is a failure review the build logs.</p>"},{"location":"code-promotion-module-release-process/#documentation-release-process","title":"Documentation Release Process","text":"<p>A guide for maintainers on how to update documentation..</p> <ol> <li>Modify files in the Docs folder following the format of other files. For a list of acceptable admonitions please see here</li> <li>If you are adding a new file ensure it is added to the <code>mkdocs.yml</code> file in the appropriate section. Use the built site to determine where a new document should be placed.</li> <li>Create a PR and merge - the actions will commence automatically. There are two actions which run in the background to update the GitHub Pages site.</li> </ol>"},{"location":"create-az-remediation-tasks/","title":"Batch Creation of Remediation Tasks","text":"<p>The script <code>Create-AzRemediationTasks.ps1</code> creates remediation tasks for all non-compliant resources for EPAC environments in the <code>global-settings.jsonc</code> file.</p> <p>This script executes all remediation tasks in a Policy as Code environment specified with parameter <code>PacEnvironmentSelector</code>. The script will interactively prompt for the value if the parameter is not supplied. The script will recurse the Management Group structure and subscriptions from the defined starting point.</p> <ul> <li>Find all Policy assignments with potential remediation capable resources</li> <li>Query Policy Insights for non-complaint resources</li> <li>Start remediation task for each Policy with non-compliant resources</li> </ul>"},{"location":"create-az-remediation-tasks/#script-parameters","title":"Script Parameters","text":"Parameter Description <code>PacEnvironmentSelector</code> Defines which Policy as Code (PAC) environment we are using, if omitted, the script prompts for a value. The values are read from <code>$DefinitionsRootFolder/global-settings.jsonc</code>. <code>DefinitionsRootFolder</code> Definitions folder path. Defaults to environment variable <code>$env:PAC_DEFINITIONS_FOLDER or './Definitions'</code>. <code>Interactive</code> Set to false if used non-interactive <code>OnlyCheckManagedAssignments</code> Include non-compliance data only for Policy assignments owned by this Policy as Code repo <code>PolicyDefinitionFilter</code> Filter by Policy definition names (array) or ids (array). <code>PolicySetDefinitionFilter</code> Filter by Policy Set definition names (array) or ids (array). <code>PolicyAssignmentFilter</code> Filter by Policy Assignment names (array) or ids (array). <code>PolicyEffectFilter</code> Filter by Policy effect (array)."},{"location":"create-az-remediation-tasks/#examples","title":"Examples","text":"<pre><code>Create-AzRemediationTasks -PacEnvironmentSelector \"dev\"\n</code></pre> <pre><code>Create-AzRemediationTasks -PacEnvironmentSelector \"dev\" -DefinitionsRootFolder \"C:\\git\\policy-as-code\\Definitions\"\n</code></pre> <pre><code>Create-AzRemediationTasks -PacEnvironmentSelector \"dev\" -DefinitionsRootFolder \"C:\\git\\policy-as-code\\Definitions\" -Interactive $false\n</code></pre> <pre><code>Create-AzRemediationTasks -PacEnvironmentSelector \"dev\" -DefinitionsRootFolder \"C:\\git\\policy-as-code\\Definitions\" -OnlyCheckManagedAssignments\n</code></pre> <pre><code>Create-AzRemediationTasks -PacEnvironmentSelector \"dev\" -DefinitionsRootFolder \"C:\\git\\policy-as-code\\Definitions\" -PolicyDefinitionFilter \"Require tag 'Owner' on resource groups\" -PolicySetDefinitionFilter \"Require tag 'Owner' on resource groups\" -PolicyAssignmentFilter \"Require tag 'Owner' on resource groups\"\n</code></pre>"},{"location":"create-az-remediation-tasks/#links","title":"Links","text":"<ul> <li>Remediate non-compliant resources with Azure Policy</li> <li>Start-AzPolicyRemediation</li> </ul>"},{"location":"create-policy-reader-role/","title":"Create Policy Reader Role","text":"<p>Creates a custom role <code>EPAC Resource Policy Reader</code> with <code>Id</code> <code>2baa1a7c-6807-46af-8b16-5e9d03fba029</code>. It provides read access to all Policy resources for the purpose of planning the EPAC deployments at the scope selected with <code>PacEnvironmentSelector</code>. The permissions granted are:</p> <ul> <li><code>Microsoft.Authorization/policyassignments/read</code></li> <li><code>Microsoft.Authorization/policydefinitions/read</code></li> <li><code>Microsoft.Authorization/policyexemptions/read</code></li> <li><code>Microsoft.Authorization/policysetdefinitions/read</code></li> <li><code>Microsoft.PolicyInsights/*</code></li> <li><code>Microsoft.Management/register/action</code></li> <li><code>Microsoft.Management/managementGroups/read</code></li> </ul>"},{"location":"create-policy-reader-role/#script-parameters","title":"Script Parameters","text":"Parameter Description <code>PacEnvironmentSelector</code> Defines which Policy as Code (PAC) environment we are using, if omitted, the script prompts for a value. The values are read from <code>$DefinitionsRootFolder/global-settings.jsonc</code>. <code>DefinitionsRootFolder</code> Definitions folder path. Defaults to environment variable <code>$env:PAC_DEFINITIONS_FOLDER or './Definitions'</code>. It contains <code>global-settings.jsonc</code>. <code>Interactive</code> Script is being run interactively and can request az login. Defaults to $false if PacEnvironmentSelector parameter provided and $true otherwise."},{"location":"create-policy-reader-role/#examples","title":"Examples","text":"<pre><code>.\\New-AzPolicyReaderRole.ps1 -PacEnvironmentSelector \"dev\" -DefinitionsRootFolder \"C:\\Src\\Definitions\" -Interactive $true\n</code></pre> <pre><code>.\\New-AzPolicyReaderRole.ps1 -Interactive $true\n</code></pre> <pre><code>.\\New-AzPolicyReaderRole.ps1 -Interactive $true -DefinitionsRootFolder \"C:\\Src\\Definitions\"\n</code></pre> <pre><code>.\\New-AzPolicyReaderRole.ps1 -Interactive $true -DefinitionsRootFolder \"C:\\Src\\Definitions\" -PacEnvironmentSelector \"dev\"\n</code></pre>"},{"location":"definitions-and-global-settings/","title":"Definitions and Global Settings","text":""},{"location":"definitions-and-global-settings/#folders","title":"Folders","text":"<p>This <code>Definitions</code> folder and subfolders contains all your definitions. The <code>Sync-Repo.ps1</code> script does not copy this folder.</p> <ol> <li>Define the Azure environment(s) in file global-settings.jsonc</li> <li>Create custom Policies (optional) in folder policyDefinitions</li> <li>Create custom Policy Sets (optional) in folder policySetDefinitions</li> <li>Define the Policy Assignments in folder policyAssignments</li> <li>Define the Policy Exemptions (optional) in folder policyExemptions</li> <li>Define Documentation in folder policyDocumentations</li> </ol>"},{"location":"definitions-and-global-settings/#global-settings","title":"Global Settings","text":"<p><code>global-settings.jsonc</code> has following sections explained below:</p> <ul> <li><code>telemetryOptOut</code> if set to true disables the collection of usage date for the EPAC repo. The default is false. See Usage Tracking for more information.</li> <li><code>pacOwnerId</code> uniquely identifies deployments from a specific repo. We recommend using a GUID.</li> <li><code>pacEnvironments</code> defines the EPAC environments.</li> <li><code>managedIdentityLocations</code> is used in Policy Assignments as the location of the created Managed Identities.</li> <li><code>globalNotScopes</code> defines scopes not subject to the Policy Assignments.</li> </ul>"},{"location":"definitions-and-global-settings/#json-schema","title":"JSON Schema","text":"<p>The GitHub repo contains a JSON schema which can be used in tools such as VS Code to provide code completion.</p> <p>To utilize the schema add a <code>$schema</code> tag to the JSON file.</p> <pre><code>{\n  \"$schema\": \"https://raw.githubusercontent.com/Azure/enterprise-azure-policy-as-code/main/Schemas/global-settings-schema.json\"\n}\n</code></pre> <p>This schema is new in v7.4.x and may not be complete. Please let us know if we missed anything.</p>"},{"location":"definitions-and-global-settings/#opt-out-of-telemetry-data-collection-telemetryoptout","title":"Opt out of telemetry data collection <code>telemetryOptOut</code>","text":"<p>Starting with v8.0.0, Enterprise Policy as Code (EPAC) is tracking the usage using Customer Usage Attribution (PID). See Usage Tracking for more information on opt out. Default is false.</p> <pre><code>\"telemetryOptOut\": true,\n</code></pre>"},{"location":"definitions-and-global-settings/#uniquely-identify-deployments-pacownerid","title":"Uniquely identify deployments <code>pacOwnerId</code>","text":"<p><code>pacOwnerId</code> is required for desired state handling to distinguish Policy resources deployed via this EPAC repo, legacy technology, another EPAC repo, or another Policy as Code solution.</p>"},{"location":"definitions-and-global-settings/#define-epac-environments-in-pacenvironments","title":"Define EPAC Environments in <code>pacEnvironments</code>","text":"<p>EPAC has a concept of an environment identified by a string (unique per repository) called <code>pacSelector</code> as defined in <code>pacEnvironments</code>. An environment associates the following with the <code>pacSelector</code>:</p> <ul> <li><code>cloud</code> - to select sovereign cloud environments.</li> <li><code>tenantId</code> - enables multi-tenant scenarios.</li> <li><code>rootDefinitionScope</code> - the deployment scope for the Policies and Policy Sets to be used in assignments later.</li> <li>Policy Assignments can only defined at this scope and child scopes (recursive).</li> <li>Operational tasks, such as <code>Create-AzRemediationTasks.ps1</code>, must use the same <code>rootDefinitionScope</code> or they will fail.</li> <li>Optional: define <code>desiredState</code> strategy. This element is documented in two places:</li> <li>Desired State Strategy. and </li> <li>Managing Defender for Cloud Assignments.</li> </ul> <p>Like any other software or IaC solution, EPAC needs areas for developing and testing new Policies, Policy Sets and Policy Assignments before any deployment to EPAC prod environments. In most cases you will need one management group hierarchy to simulate EPAC production management groups for development and testing of Policies. EPAC's prod environment will govern all other IaC environments (e.g., sandbox, development, integration, test/qa, pre-prod, prod, ...) and tenants. This can be confusing. We will use EPAC environment(s) and IaC environments to disambiguate the environments.</p> <p>In a centralized single tenant scenario, you will define two EPAC environments: epac-dev and tenant. In a multi-tenant scenario, you will add an additional EPAC environment per additional tenant.</p> <p>The <code>pacSelector</code> is just a name. We highly recommend to call the Policy development environment <code>epac-dev</code>, you can name the EPAC prod environments in a way which makes sense to you in your environment. We use <code>tenant</code>, <code>tenant1</code>, etc in our samples and documentation. These names are used and therefore must match:</p> <ul> <li>Defining the association (<code>pacEnvironments</code>) of an EPAC environment, <code>managedIdentityLocation</code> and <code>globalNotScopes</code> in <code>global-settings.jsonc</code></li> <li>Script parameter when executing different deployment stages in a CI/CD pipeline or semi-automated deployment targeting a specific EPAC environments.</li> <li><code>scopes</code>, <code>notScopes</code>, <code>additionalRoleAssignments</code>, <code>managedIdentityLocations</code>, and <code>userAssignedIdentity</code> definitions in Policy Assignment JSON files.</li> </ul> <pre><code>\"pacEnvironments\": [\n    {\n        \"pacSelector\": \"epac-dev\",\n        \"cloud\": \"AzureCloud\",\n        \"tenantId\": \"70238025-b3dc-40a5-bea1-314973cea2db\",\n        \"deploymentRootScope\": \"/providers/Microsoft.Management/managementGroups/PAC-Heinrich-Dev\"\n    },\n    {\n        \"pacSelector\": \"tenant\",\n        \"cloud\": \"AzureCloud\",\n        \"tenantId\": \"70238025-b3dc-40a5-bea1-314973cea2db\",\n        \"deploymentRootScope\": \"/providers/Microsoft.Management/managementGroups/Contoso-Root\",\n        \"inheritedDefinitionsScopes\": [], // optional for desired state coexistence scenarios\n        \"desiredState\": { // optional for desired state coexistence scenarios\n        }\n    }\n],\n</code></pre>"},{"location":"definitions-and-global-settings/#deployifnotexists-and-modify-policy-assignments-need-managedidentitylocation","title":"DeployIfNotExists and Modify Policy Assignments need <code>managedIdentityLocation</code>","text":"<p>Policies with <code>Modify</code> and <code>DeployIfNotExists</code> effects require a Managed Identity for the remediation task. This section defines the location of the managed identity. It is often created in the tenant's primary location. This location can be overridden in the Policy Assignment files. The star in the example matches all <code>pacEnvironmentSelector</code> values.</p> <pre><code>    \"managedIdentityLocation\": {\n        \"*\": \"eastus2\"\n    },\n</code></pre>"},{"location":"definitions-and-global-settings/#excluding-scopes-for-all-assignments-with-globalnotscopes","title":"Excluding scopes for all Assignments with <code>globalNotScopes</code>","text":"<p>Resource Group patterns allow us to exclude \"special\" managed Resource Groups. The exclusion is not dynamic. It is calculated when the deployment scripts execute.</p> <p>The arrays can have the following entries:</p> Scope type Example <code>managementGroups</code> \"/providers/Microsoft.Management/managementGroups/myManagementGroupId\" <code>subscriptions</code> \"/subscriptions/00000000-0000-0000-000000000000\" <code>resourceGroups</code> \"/subscriptions/00000000-0000-0000-000000000000/resourceGroups/myResourceGroup\" <code>resourceGroupPatterns</code> No wild card or single * wild card at beginning or end of name or both; wild cards in the middle are invalid:  \"/resourceGroupPatterns/name\"  \"/resourceGroupPatterns/name*\"   \"/resourceGroupPatterns/*name\"  \"/resourceGroupPatterns/*name*\" <pre><code>    \"globalNotScopes\": {\n        \"*\": [\n            \"/resourceGroupPatterns/synapseworkspace-managedrg-*\",\n            \"/resourceGroupPatterns/managed-rg-*\",\n            \"/resourceGroupPatterns/databricks-*\",\n            \"/resourceGroupPatterns/DefaultResourceGroup*\",\n            \"/resourceGroupPatterns/NetworkWatcherRG\",\n            \"/resourceGroupPatterns/LogAnalyticsDefault*\",\n            \"/resourceGroupPatterns/cloud-shell-storage*\"\n        ],\n        \"tenant\": [\n            \"/providers/Microsoft.Management/managementGroups/mg-personal-subscriptions\",\n            \"/providers/Microsoft.Management/managementGroups/mg-policy-as-code\"\n        ]\n    },\n</code></pre>"},{"location":"desired-state-strategy/","title":"Desired State Strategy","text":"<p>Desired State strategy enables shared responsibility scenarios. the following documents the archetypical use cases. For complex scenarios it is possible to combine multiple use cases.</p>"},{"location":"desired-state-strategy/#use-case-1-centralized-team","title":"Use Case 1: Centralized Team","text":"<p>This original (previously the only) use case assumes one team/repo manages all Policies in a tenant or multiple tenants. <code>global-settings.jsonc</code> must not contain the following entries:</p> <ul> <li><code>inheritedDefinitionsScopes</code></li> <li><code>desiredState</code></li> </ul>"},{"location":"desired-state-strategy/#use-case-2-manage-policy-definitions-assignments-or-exemptions-differently","title":"Use case 2: Manage Policy Definitions, Assignments, or Exemptions differently","text":"<p>In some organizations the lifecycle of different parts may be managed separately. For example, you may have one repo to manage Definitions and Assignments separately from Exemptions. Since the ownership of Exemptions is managed from the Assignment <code>pacOwnerId</code>, changing it is not effective.</p> <p>EPAC only manages items with a directory in the <code>Definitions</code> folder. Therefore, you can use the same <code>pacOwnerId</code> from two repos and remove the folders to separate them. In this example:</p> <ul> <li>Repo1: <code>Definitions</code> contains <code>policyDefinitions</code>, <code>policySetDefinitions</code> and <code>policyAssignments</code> folders.</li> <li>Repo2: <code>Definitions</code> contains <code>policyExemptions</code> folder.</li> </ul> <p>Policy resource that would be defined in the folder. It is important to remove the folders. GitHub repos remove empty folder automatically.</p> <p>If you have an empty folder or a folder with a file extension not recognized by EPAC, EPAC will delete any item which the folder could define from your environment.</p>"},{"location":"desired-state-strategy/#use-case-3-include-resource-groups","title":"Use case 3: Include Resource Groups","text":"<p>By default, Policy Assignments at resource groups are not managed by EPAC. Prior to v6.0, managing resource groups was to expensive. Breaking change: If you used the <code>-IncludeResourceGroup</code> switch in prior versions, set <code>includeResourceGroups</code> to <code>true</code> to achieve the same effect. We also recommend this for new installations.</p> <pre><code>\"desiredState\": {\n    \"strategy\": \"full\",\n    \"includeResourceGroups\": true\n}\n</code></pre>"},{"location":"desired-state-strategy/#use-case-4-multiple-teams-with-shared-responsibility","title":"Use Case 4: Multiple Teams with Shared Responsibility","text":"<p>In a shared responsibility model multiple teams manage the same tenant(s) at the same scope. Additionally, a variant of this use case is well suited to what previously was called <code>brownfield</code> which needs to preserve Policy resources deployed prior to EPAC. The following diagram shows two EPAC solutions managing the same root (tenant). Other Policy as Code solutions can also participate if the solution sets <code>metadata.pacOwnerId</code>.</p> <p></p> <p>For standard behavior where each repo manages, no additional entries in <code>global-settings.jsonc</code> are necessary since the default strategy <code>full</code> is the default. <code>full</code> deletes any Policy resources without a <code>pacOwnerId</code>; however, id does not delete Policy resources with a different <code>pacOwnerId</code>.</p> <p>You may add the following JSON for clarity/documentation of the default behavior.</p> <pre><code>\"desiredState\": {\n    \"strategy\": \"full\"\n}\n</code></pre>"},{"location":"desired-state-strategy/#use-case-5-multiple-teams-in-a-hierarchical-organization","title":"Use Case 5:  Multiple Teams in a Hierarchical Organization","text":"<p>The hierarchical model allows a central team to manage the commonality while giving parts of the organization a capability to further restrict resources with Policies. This is a common scenario in multi-national corporations with additional jurisdictional requirements (e.g., data sovereignty, local regulations, ...).</p> <p>Additionally, it is possible for a solution at a child scope to inherit Policy definitions.</p> <p></p> <p>Repo A is managed the same as in use cases 1, 2 and 2a. Repo C sets sets the same as repo B in use case 2 or 2a. If inheriting Policy definitions from the parent EPAC solution, add <code>inheritedDefinitionsScopes</code> to <code>global-settings.jsonc</code>. Inherited definition scopes used but not managed by this repository, scopes must be visible from <code>deploymentRootScope</code>.</p> <pre><code>\"inheritedDefinitionsScopes\": [],\n\"desiredState\": {\n    \"strategy\": \"full\"\n}\n</code></pre>"},{"location":"desired-state-strategy/#use-case-6-transitioning-to-epac","title":"Use Case 6: Transitioning to EPAC","text":"<p>While transitioning to EPAC, existing Policy resources may need to be kept. Setting <code>desiredState</code> to <code>ownedOnly</code> allows EPAC to remove its own resources while preserving instances requiring (temporary) preservation.</p> <pre><code>\"desiredState\": {\n    \"strategy\": \"ownedOnly\"\n}\n</code></pre>"},{"location":"desired-state-strategy/#use-case-7-exclude-some-scopes-and-policy-resources","title":"Use Case 7: Exclude some Scopes and Policy Resources","text":"<p>In rare cases you may need to exclude individual child scopes, or Policy resources from management by an EPAC solution.</p>"},{"location":"desired-state-strategy/#child-scope-not-managed-and-not-subject-to-these-policies","title":"Child Scope not Managed and Not Subject to these Policies","text":"<p>Child scope is managed by some other means. The use of a EPAC development Management Group under the same root is such an example. Another example is a child scope managed by a different organization not subject to the root scope Policies.</p> <p>You use <code>globalNotScopes</code> to exclude a child scope from management by EPAC. The following example excludes the <code>childScope</code> from management by EPAC. See also Definitions and Global Settings</p> <pre><code>    \"globalNotScopes\": {\n        \"tenant\": [\n            \"/providers/Microsoft.Management/managementGroups/mg-policy-as-code\"\n        ]\n    },\n</code></pre>"},{"location":"desired-state-strategy/#child-scopes-not-managed-by-any-epac-repo-but-subject-to-these-policies","title":"Child Scopes not Managed by any EPAC repo but Subject to these Policies","text":"<p>This happens when EPAC <code>strategy</code> is <code>full</code> and some child scopes contain Policy resources not managed by an EPAC repo (delivered through some other deployment method). You can exclude them based on:</p> <ul> <li>Scopes (Management Groups, subscriptions and Resource Groups) through <code>desiredState.excludedScopes</code></li> <li>Policy Definitions through <code>desiredState.excludedPolicyDefinitions</code></li> <li>Policy Set Definitions through <code>desiredState.excludedPolicySetDefinitions</code></li> <li>Policy Assignments through <code>desiredState.excludedPolicyAssignments</code></li> </ul> <p>You can exclude any combination of <code>excludedScopes</code>, <code>excludedPolicyDefinitions</code>, <code>excludedPolicySetDefinitions</code> and <code>excludedPolicyAssignments</code>. Any of the strings can contain simple wild cards.</p> <p>Examples</p> <pre><code>\"desiredState\": {\n    \"strategy\": \"full\",\n    \"excludedScopes\": [ // Management Groups, Subscriptions, Resource Groups\n        \"/providers/Microsoft.Management/managementGroups/mg-policy-as-code/childScope\"\n    ],\n    \"excludedPolicyDefinitions\": [\n        \"/subscriptions/*/providers/Microsoft.Authorization/policyDefinitions/childScope-policy\"\n    ],\n    \"excludedPolicySetDefinitions\": [\n        \"/providers/Microsoft.Management/managementGroups/mg-policy-as-code/providers/Microsoft.Authorization/policySetDefinitions/pattern-policy-set-*\",\n        \"/providers/Microsoft.Management/managementGroups/mg-policy-as-code/providers/Microsoft.Authorization/policySetDefinitions/one-of-policy-set\"\n    ],\n    \"excludedPolicyAssignments\": [\n        \"/subscriptions/*/providers/Microsoft.Authorization/policyAssignments/my-*\"\n    ]\n}\n</code></pre> <p></p>"},{"location":"dfc-assignments/","title":"Managing Defender for Cloud Assignments","text":"<p>Defender for Cloud (DFC) is a suite of Azure Security Center (ASC) capabilities that helps you prevent, detect, and respond to threats. It provides you with integration of Microsoft's threat protection technology and expertise. For more information, see Azure Defender for Cloud.</p>"},{"location":"dfc-assignments/#behavior-of-epac-prior-to-v900","title":"Behavior of EPAC Prior to v9.0.0","text":"<p>Defender for Cloud uses Azure Policy Assignments to enable and configure the various capabilities. These assignments are created at the subscription level.</p> <ul> <li>Policy Assignments required for Defender plans (e.g., SQL, App Service, ...)</li> <li>Policy Assignments required for Security policies (e.g., Microsoft Cloud Security Benchmark, NIST 800-53 Rev 5, NIST 800-171, ...)</li> </ul> <p>Prior to v9.0.0 of EPAC, Defender for Cloud Assignments were removed by EPAC. This was a problem for Microsoft's customers, especially for Defender Plans. </p>"},{"location":"dfc-assignments/#revised-behavior-of-epac-starting-with-v900","title":"Revised behavior of EPAC Starting with v9.0.0:","text":"<ul> <li>EPAC no longer manages (removes) <code>Defender for Cloud</code>'s Policy Assignments required for enabled Defender Plans. </li> <li> <p>EPAC behavior for Security Policy is controlled by the <code>keepDfcSecurityAssignments</code> in <code>desiredState</code> setting per <code>pacEnvironment</code> in <code>global-settings.jsonc</code>.</p> <ul> <li>If set to <code>true</code> or <code>strategy</code> is <code>ownedOnly</code>, EPAC will not remove Security Policy assignments created by Defender for Cloud.</li> <li>If omitted or set to <code>false</code> and <code>strategy</code> is <code>full</code>, EPAC will remove Security Policy Set Assignments created by Defender for Cloud.</li> </ul> <pre><code>\"desiredState\": {\n    \"strategy\": \"full\",\n    \"keepDfcSecurityAssignments\": true\n}\n</code></pre> </li> </ul> <p>Security Policies should be manged by EPAC at the Management Group level; this is the recommended approach for managing Security Policies instead of relying on the auto-assignments.</p>"},{"location":"dfc-assignments/#defender-for-cloud-settings","title":"Defender for Cloud Settings","text":""},{"location":"dfc-assignments/#defender-for-cloud-settings-for-defender-plans","title":"Defender for Cloud settings for Defender Plans","text":""},{"location":"dfc-assignments/#defender-for-cloud-settings-for-security-policy-sets","title":"Defender for Cloud settings for Security Policy Sets","text":""},{"location":"documenting-assignments-and-policy-sets/","title":"Documenting Policy Assignments and Sets of Policy Set (Initiative) definitions","text":""},{"location":"documenting-assignments-and-policy-sets/#overview","title":"Overview","text":"<p>The Documentation feature provides reports on Policy Assignments deployed within an environment, and comparisons of Policy Assignments and Sets of Policy Set definitions for considering differences in policies and effects.  Output is generated as Markdown (<code>.md</code>), and Excel (<code>.csv</code>) files. with script <code>./Scripts/Operations/Build-PolicyDocumentation.ps1</code> It retrieves its instruction from the JSON files in this folder; the names of the definition JSON files don't matter as the script reads any file in the folder with a <code>.json</code> and <code>.jsonc</code> extension.</p> <ul> <li>Read and process Policy Assignments which are representative of an environment category, such as prod, test, dev, and sandbox. It generates Markdown (<code>.md</code>), and Excel (<code>.csv</code>) files.</li> <li>Read and process Policy Sets to compare them for Policy and effect overlap. It generates Markdown (<code>.md</code>), Excel (<code>.csv</code>) files, and JSON file (<code>.jsonc</code>).</li> </ul>"},{"location":"documenting-assignments-and-policy-sets/#json-schema","title":"JSON Schema","text":"<p>The GitHub repo contains a JSON schema which can be used in tools such as VS Code to provide code completion.</p> <p>To utilize the schema add a <code>$schema</code> tag to the JSON file.</p> <pre><code>{\n  \"$schema\": \"https://raw.githubusercontent.com/Azure/enterprise-azure-policy-as-code/main/Schemas/policy-documentation-schema.json\"\n}\n</code></pre> <p>This schema is new in v7.4.x and may not be complete. Please let us know if we missed anything.</p>"},{"location":"documenting-assignments-and-policy-sets/#example-documentation-specification-file","title":"Example Documentation Specification File","text":"<p>Each file must contain one or both documentation topics. This example file in the StarterKit has both topics. Element <code>pacEnvironment</code> references the Policy as Code environment in <code>global-settings.jsonc</code> defining the tenant and root scope where the custom Policies and Policy Sets are deployed.</p> <ul> <li><code>documentAssignments</code></li> <li><code>documentPolicySets</code></li> </ul> <pre><code>{\n    \"documentAssignments\": {\n        \"environmentCategories\": [\n            {\n                \"pacEnvironment\": \"tenant\",\n                \"environmentCategory\": \"prod\",\n                \"scopes\": [ // Used in Markdown output only\n                    \"Management Groups: Contoso-Prod\"\n                ],\n                \"representativeAssignments\": [\n                    {\n                        \"shortName\": \"ASB\",\n                        \"id\": \"/providers/Microsoft.Management/managementGroups/Contoso-Prod/providers/Microsoft.Authorization/policyAssignments/prod-asb\"\n                    },\n                    {\n                        \"shortName\": \"ORG\",\n                        \"id\": \"/providers/Microsoft.Management/managementGroups/Contoso-Prod/providers/Microsoft.Authorization/policyAssignments/prod-org\"\n                    }\n                ]\n            },\n            {\n                \"pacEnvironment\": \"tenant\",\n                \"environmentCategory\": \"test\",\n                \"scopes\": [ // Used in Markdown output only\n                    \"Management Groups: Contoso-NonProd\"\n                ],\n                \"representativeAssignments\": [\n                    {\n                        \"shortName\": \"ASB\",\n                        \"id\": \"/providers/Microsoft.Management/managementGroups/Contoso-NonProd/providers/Microsoft.Authorization/policyAssignments/prod-asb\"\n                    },\n                    {\n                        \"shortName\": \"ORG\",\n                        \"id\": \"/providers/Microsoft.Management/managementGroups/Contoso-NonProd/providers/Microsoft.Authorization/policyAssignments/prod-org\"\n                    }\n                ]\n            },\n            {\n                \"pacEnvironment\": \"tenant\",\n                \"environmentCategory\": \"dev\",\n                \"scopes\": [ // Used in Markdown output only\n                    \"Management Groups: Contoso-Dev\"\n                ],\n                \"representativeAssignments\": [\n                    {\n                        \"shortName\": \"ASB\",\n                        \"id\": \"/providers/Microsoft.Management/managementGroups/Contoso-Dev/providers/Microsoft.Authorization/policyAssignments/prod-asb\"\n                    },\n                    {\n                        \"shortName\": \"ORG\",\n                        \"id\": \"/providers/Microsoft.Management/managementGroups/Contoso-Dev/providers/Microsoft.Authorization/policyAssignments/prod-org\"\n                    }\n                ]\n            },\n        ],\n        \"documentationSpecifications\": [\n            {\n                \"fileNameStem\": \"contoso-policy-effects-across-environments\",\n                \"environmentCategories\": [\n                    \"prod\",\n                    \"test\",\n                    \"dev\"\n                ],\n                \"title\": \"Contoso Policy effects\"\n            }\n        ]\n    },\n    \"documentPolicySets\": [\n        {\n            \"pacEnvironment\": \"tenant\",\n            \"fileNameStem\": \"contoso-compliance-policy-sets\",\n            \"title\": \"Document interesting Policy Sets\",\n            \"policySets\": [\n                {\n                    \"shortName\": \"ASB\",\n                    \"id\": \"/providers/Microsoft.Authorization/policySetDefinitions/1f3afdf9-d0c9-4c3d-847f-89da613e70a8\" // Azure Security Benchmark v3\n                },\n                {\n                    \"shortName\": \"NIST 800-171\",\n                    \"id\": \"/providers/Microsoft.Authorization/policySetDefinitions/03055927-78bd-4236-86c0-f36125a10dc9\" // NIST SP 800-171 Rev. 2\n                },\n                {\n                    \"shortName\": \"NIST 800-53\",\n                    \"id\": \"/providers/Microsoft.Authorization/policySetDefinitions/179d1daa-458f-4e47-8086-2a68d0d6c38f\" // NIST SP 800-53 Rev. 5\n                },\n                {\n                    \"shortName\": \"ORG\",\n                    \"id\": \"/providers/Microsoft.Management/managementGroups/Contoso-Root/providers/Microsoft.Authorization/policySetDefinitions/org-security-benchmark\" // Organization Security Benchmark for Custom Policies\n                }\n            ],\n            \"environmentColumnsInCsv\": [\n                \"prod\",\n                \"test\",\n                \"dev\",\n                \"lab\"\n            ]\n        }\n    ]\n}\n</code></pre>"},{"location":"documenting-assignments-and-policy-sets/#assignment-documentation","title":"Assignment Documentation","text":""},{"location":"documenting-assignments-and-policy-sets/#element-environmentcategories","title":"Element <code>environmentCategories</code>","text":"<p>For any given environment category, such as <code>prod</code>, <code>test</code>, <code>dev</code>, this section lists Policy Assignments which are representative for those environments. In many organizations, the same Policies and effects are applied to multiple Management Groups and even Azure tenants with the parameters consistent by environment category.</p> <p>Each <code>environmentCategories</code> entry specifies:</p> <ul> <li><code>pacEnvironment</code>: references the Policy as Code environment in <code>global-settings.jsonc</code> defining the tenant and root scope where the Policies and Policy Sets are deployed.</li> <li><code>environmentCategory</code>: name used for column headings and referenced in <code>documentationSpecifications</code> below.</li> <li><code>scopes</code>:  used in Markdown output only for the Scopes section as unprocessed text.</li> <li><code>representativeAssignments</code>: list Policy Assignment <code>id</code>s representing this <code>environmentCategory</code>. The <code>shortName</code> is used for CSV column headings and markdown output.</li> </ul>"},{"location":"documenting-assignments-and-policy-sets/#element-documentationspecifications","title":"Element <code>documentationSpecifications</code>","text":"<p>Each entry in the array defines a set of outputs:</p> <ul> <li><code>fileNameStem</code>: the file name stem used to construct the filenames.</li> <li><code>environmentCategories</code> listed as effect columns.</li> <li><code>title</code>: Heading 1 text for Markdown.</li> </ul>"},{"location":"documenting-assignments-and-policy-sets/#output-files","title":"Output files","text":"<ul> <li> <p><code>&lt;fileNameStem&gt;-full.csv</code>: Lists Policies across environments and multiple Policy Sets sorted by <code>category</code> and <code>`displayName</code>.</p> Column Description <code>name</code> Policy name (must be unique - a GUID for built-in Policies) <code>referencePath</code> Disambiguate Policies included multiple times in an Policy Set definition with different <code>referenceId</code>s. It is blank if not needed or formatted as <code>&lt;policy-set.name&gt;\\\\&lt;referenceId&gt;</code>. <code>category</code> Policy <code>category</code> from Policy <code>metadata</code>. <code>displayName</code> <code>description</code> <code>groupNames</code> Union of (compliance Policy Sets) <code>groupNames</code> for this Policy. <code>allowedEffects</code> List of allowed Policy <code>effect</code>s. Note: Some Policy Sets may have hard coded the effect which is not represented here. <code>&lt;environmentCategory&gt;_Effect</code> One column per <code>environmentCategory</code> listing the highest enforcement level across the Policy Sets assigned in this environment category. <code>&lt;environmentCategory&gt;_Parameters</code> One column per <code>environmentCategory</code> listing the parameters (JSON - excluding the effect parameter) for this Policy and <code>environmentCategory</code>. <code>&lt;environmentCategory&gt;-</code><code>&lt;policy-set-short name&gt;-Effect</code> Detailed effect per <code>environmentCategory</code> and Policy Set. The next table shows examples for the different pattern for this value. An actual document will reflect the actual value in your environment. <code>&lt;policy-set-short name&gt;-ParameterDefinitions</code> Parameter definitions (JSON) per Policy Set containing this Policy. <p>Examples for effects:</p> Value Description <code>Deny (assignment: secretsExpirationSetEffect)</code> Effect is <code>Deny</code> specified in a user defined value for parameter <code>secretsExpirationSetEffect</code> <code>Audit (default: useRbacRulesMonitoringEffect)</code> Effect is <code>Audit</code> default value for Policy Set parameter <code>useRbacRulesMonitoringEffect</code>. <code>Audit (Initiative Fixed)</code> Effect is parameterized in Policy definition. Policy Set definition is setting it to a fixed value of <code>Audit</code>. <code>Audit (Policy Default)</code> Effect is parameterized in Policy definition with default value of <code>Audit</code>. The Policy Set definition does not override or surface this value. <code>Modify (Policy Fixed)</code> Effect is not parameterized in Policy definition. It is set to a fixed value of <code>Modify</code>. </li> <li> <p><code>&lt;fileNameStem&gt;-parameters.csv</code>: This file is intended for a future enhancement to EPAC which will allow the effect values and parameter values to be specified in a spreadsheet instead of JSON. This file is generated to make it usable as the starting list, or to round-trip the values. It lists Policies across environments and Initiatives sorted by <code>category</code> and <code>`displayName</code>. Columns (see above for descriptions):</p> </li> <li> <p><code>name</code></p> </li> <li><code>referencePath</code></li> <li><code>category</code> (not required to define the parameters - useful for the author of the spreadsheet)</li> <li><code>displayName</code> (not required to define the parameters - useful for the author of the spreadsheet)</li> <li><code>description</code> (not required to define the parameters - useful for the author of the spreadsheet)</li> <li><code>allowedEffects</code> (not required to define the parameters - useful for the author of the spreadsheet)</li> <li><code>&lt;environmentCategory&gt;_Effect</code></li> <li> <p><code>&lt;environmentCategory&gt;_Parameters</code></p> </li> <li> <p><code>&lt;fileNameStem&gt;-summary.md</code>: This Markdown file is intended for developers for a quick overview of the effects and parameters in place for each <code>environmentCategory</code>. It does not provide details about the individual Initiatives assigned. It is equivalent to <code>&lt;fileNameStem&gt;-parameters.csv</code>. The Policies are sorted by <code>category</code> and <code>`displayName</code>. Each<code>environmentCategory</code> column shows the current enforcement level in bold. If the value is fixed, the value is also in italics. If it is parametrized, the other allowed values are shown in italics.</p> </li> <li> <p><code>&lt;fileNameStem&gt;-full.md</code>: This Markdown file is intended for security personel requiring more details about the Assignments and Policies. It displays the same information as the summary plus the additional details equivalent to <code>&lt;fileNameStem&gt;-full.csv</code>. The Policies are sorted by <code>category</code> and <code>`displayName</code>. Each<code>environmentCategory</code> column shows the current enforcement level in bold. If the value is fixed, the value is also in italics. If it is parametrized, the other allowed values are shown in italics. The additional details are:</p> </li> <li>Group Names</li> <li>Effects per <code>environmentCategory</code> and Policy Set with additional details on the origin of the effect.</li> </ul>"},{"location":"documenting-assignments-and-policy-sets/#policy-set-documentation","title":"Policy Set Documentation","text":"<p>Compares multiple Policy Set definitions for Policy and effect overlap as Markdown and Excel (<code>.csv</code>) files.</p>"},{"location":"documenting-assignments-and-policy-sets/#element-documentpolicysets","title":"Element <code>documentPolicySets</code>","text":"<ul> <li><code>pacEnvironment</code>: references the Policy as Code environment in <code>global-settings.jsonc</code> defining the tenant and root scope where the Policy and Policy Set definitions are deployed.</li> <li><code>fileNameStem</code>: the file name without the extension (.md, .csv, .jsonc)</li> <li><code>title</code>: Heading 1 text for Markdown.</li> <li><code>policySets</code>: list Policy Sets (<code>id</code>) to be compared and included in the parameter JSON file. The <code>shortName</code> is used for column headings.</li> <li><code>environmentColumnsInCsv</code>: list of columns to generate a parameter file starter equivalent to <code>&lt;fileNameStem&gt;-parameters.csv</code> above in the assignment documentation section.</li> </ul>"},{"location":"documenting-assignments-and-policy-sets/#output-files_1","title":"Output files","text":"<ul> <li> <p><code>&lt;fileNameStem&gt;-full.md</code>: Markdown file with Policies sorted by Policy category and display name with effect columns for each Initiative.</p> </li> <li> <p>Each effect column starts with the bolded display Name followed by the description and lines grouped by bolded Initiative short name with the effect parameter name in italics and the group names in normal text.</p> </li> <li> <p>The text below the description contains details on parameters and group names for each initiative.</p> </li> <li> <p><code>&lt;fileNameStem&gt;-full.csv</code>: Excel file with the same information as the Markdown file.</p> </li> <li><code>&lt;fileNameStem&gt;-parameters.csv</code>: Excel parameter file starter equivalent to <code>&lt;fileNameStem&gt;-parameters.csv</code> above in the assignment documentation section.</li> <li><code>&lt;fileNameStem&gt;.jsonc</code>: Parameter file starter in JSON format to simplify parameter settings for Assignments (traditional approach).</li> </ul>"},{"location":"export-non-compliance/","title":"Exporting Non-Compliance Reports","text":"<p>The script <code>Export-NonComplianceReports</code> exports non-compliance reports for EPAC environments in the <code>global-settings.jsonc</code> file. It outputs the reports in the <code>$outputFolders/non-compliance-reports</code> folder:</p> <ul> <li><code>summary-by-policy.csv</code> contains the summary of the non-compliant resources by Policy definition. The columns contain the resource counts.</li> <li><code>summary-by-resource.csv</code> contains the summary of the non-compliant resources. The columns contain the number of Policies causing the non-compliance.</li> <li><code>details-by-policy.csv</code> contains the details of the non-compliant resources by Policy definition including the non-compliant resource ids. Assignments are combined by Policy definition.</li> <li><code>details-by-resource.csv</code> contains the details of the non-compliant resources sorted by Resource id. Assignments are combined by Resource id.</li> <li><code>full-details-by-assignment.csv</code> contains the details of the non-compliant resources sorted by Policy Assignment id.</li> <li><code>full-details-by-resource.csv</code> contains the details of the non-compliant resources sorted by Resource id including the Policy Assignment details.</li> </ul>"},{"location":"export-non-compliance/#script-parameters","title":"Script parameters","text":"Parameter Explanation <code>PacEnvironmentSelector</code> Defines which Policy as Code (PAC) environment we are using, if omitted, the script prompts for a value. The values are read from <code>$DefinitionsRootFolder/global-settings.jsonc</code>. <code>DefinitionsRootFolder</code> Definitions folder path. Defaults to environment variable <code>$env:PAC_DEFINITIONS_FOLDER</code> or <code>./Definitions</code>. <code>OutputFolder</code> Output Folder. Defaults to environment variable <code>$env:PAC_OUTPUT_FOLDER</code> or <code>./Outputs</code>. <code>WindowsNewLineCells</code> Formats CSV multi-object cells to use new lines and saves it as UTF-8 with BOM - works only for Excel in Windows. Default uses commas to separate array elements within a cell <code>Interactive</code> Set to false if used non-interactive <code>OnlyCheckManagedAssignments</code> Include non-compliance data only for Policy assignments owned by this Policy as Code repo <code>PolicyDefinitionFilter</code> Filter by Policy definition names (array) or ids (array). <code>PolicySetDefinitionFilter</code> Filter by Policy Set definition names (array) or ids (array). Can only be used when PolicyAssignmentFilter is not used. <code>PolicyAssignmentFilter</code> Filter by Policy Assignment names (array) or ids (array). Can only be used when PolicySetDefinitionFilter is not used. <code>PolicyEffectFilter</code> Filter by Policy effect (array). <code>RemediationOnly</code> Filter by Policy Effect \"deployifnotexists\" and \"modify\" and compliance status \"NonCompliant\""},{"location":"export-non-compliance/#examples","title":"Examples","text":"<pre><code>Export-NonComplianceReports -PacEnvironmentSelector \"dev\"\n</code></pre> <pre><code>Export-NonComplianceReports -PacEnvironmentSelector \"dev\" -DefinitionsRootFolder \"C:\\MyPacRepo\\Definitions\" -OutputFolder \"C:\\MyPacRepo\\Outputs\"\n</code></pre> <pre><code>Export-NonComplianceReports -PacEnvironmentSelector \"dev\" -DefinitionsRootFolder \"C:\\MyPacRepo\\Definitions\" -OutputFolder \"C:\\MyPacRepo\\Outputs\" -WindowsNewLineCells\n</code></pre> <pre><code>Export-NonComplianceReports -PacEnvironmentSelector \"dev\" -DefinitionsRootFolder \"C:\\MyPacRepo\\Definitions\" -OutputFolder \"C:\\MyPacRepo\\Outputs\" -OnlyCheckManagedAssignments\n</code></pre> <pre><code>Export-NonComplianceReports -PolicySetDefinitionFilter \"org-sec-initiative\", \"/providers/Microsoft.Authorization/policySetDefinitions/11111111-1111-1111-1111-111111111111\"\n</code></pre> <pre><code>Export-NonComplianceReports -PolicyAssignmentFilter \"/providers/microsoft.management/managementgroups/11111111-1111-1111-1111-111111111111/providers/microsoft.authorization/policyassignments/taginh-env\", \"prod-asb\"\n</code></pre>"},{"location":"export-non-compliance/#sample-output","title":"Sample Output","text":""},{"location":"export-non-compliance/#summary-by-policycsv","title":"<code>summary-by-policy.csv</code>","text":"Category Policy Name Policy Id Non Compliant Unknown Not Started Exempt Conflicting Error Assignment Ids Group Names General Audit usage of custom RBAC roles /providers/microsoft.authorization/policydefinitions/a451c1ef-c6ca-483d-87ed-f49761e3ffb5 9 0 0 0 0 0 /providers/microsoft.management/managementgroups/pac-heinrich-dev-dev/providers/microsoft.authorization/policyassignments/dev-nist-800-53-r5,/providers/microsoft.management/managementgroups/pac-heinrich-dev-dev/providers/microsoft.authorization/policyassignments/dev-asb azure_security_benchmark_v3.0_pa-7,nist_sp_800-53_r5_ac-6(7),nist_sp_800-53_r5_ac-2(7),nist_sp_800-53_r5_ac-6,nist_sp_800-53_r5_ac-2 Regulatory Compliance Control use of portable storage devices /providers/microsoft.authorization/policydefinitions/0a8a1a7d-16d3-4d8e-9f2c-6b8d9e1c7c1d 0 0 0 0 0 0 /providers/microsoft.management/managementgroups/pac-heinrich-dev-dev/providers/microsoft.authorization/policyassignments/dev-nist-800-53-r5,/providers/microsoft.management/managementgroups/pac-heinrich-dev-dev/providers/microsoft.authorization/policyassignments/dev-asb azure_security_benchmark_v3.0_pa-7,nist_sp_800-53_r5_ac-6(7),nist_sp_800-53_r5_ac-2(7),nist_sp_800-53_r5_ac-6,nist_sp_800-53_r5_ac-2 Regulatory Compliance Deploy Azure Policy to audit Windows VMs that do not use managed disks /providers/microsoft.authorization/policydefinitions/0b2b84f2-eb8a-4f0a-8a1c-0c0d6e4cdeea 0 0 0 0 0 0 /providers/microsoft.management/managementgroups/pac-heinrich-dev-dev/providers/microsoft.authorization/policyassignments/dev-nist-800-53-r5,/providers/microsoft.management/managementgroups/pac-heinrich-dev-dev/providers/microsoft.authorization/policyassignments/dev-asb azure_security_benchmark_v3.0_pa-7,nist_sp_800-53_r5_ac-6(7),nist_sp_800-53_r5_ac-2(7),nist_sp_800-53_r5_ac-6,nist_sp_800-53_r5_ac-2 Regulatory Compliance Deploy Azure Policy to audit Windows VMs that do not use managed disks /providers/microsoft.authorization/policydefinitions/0b2b84f2-eb8a-4f0a-8a1c-0c0d6e4cdeea 0 0 0 0 0 0 /providers/microsoft.management/managementgroups/pac-heinrich-dev-dev/providers/microsoft.authorization/policyassignments/dev-nist-800-53-r5,/providers/microsoft.management/managementgroups/pac-heinrich-dev-dev/providers/microsoft.authorization/policyassignments/dev-asb azure_security_benchmark_v3.0_pa-7,nist_sp_800-53_r5_ac-6(7),nist_sp_800-53_r5_ac-2(7),nist_sp_800-53_r5_ac-6,nist_sp_800-53_r5_ac-2"},{"location":"export-non-compliance/#summary-by-resourcecsv","title":"<code>summary-by-resource.csv</code>","text":"Resource Id Subscription Id Subscription Name Resource Group Resource Type Resource Name Resource Qualifier Non Compliant Unknown Not Started Exempt Conflicting Error /subscriptions/******** ******** PAC-DEV-001 subscriptions 25 481 0 0 0 0 /subscriptions/********/providers/microsoft.authorization/roledefinitions/0b00bc79-2207-410c-b9d5-d5d182ad514f ******** PAC-DEV-001 microsoft.authorization/roledefinitions 0b00bc79-2207-410c-b9d5-d5d182ad514f 0 0 0 0 0 0 /subscriptions/********/providers/microsoft.authorization/roledefinitions/0b00bc79-2207-410c-b9d5-d5d182ad514f ******** PAC-DEV-001 microsoft.authorization/roledefinitions 0b00bc79-2207-410c-b9d5-d5d182ad514f 0 0 0 0 0 0 /subscriptions/********/providers/microsoft.authorization/roledefinitions/0b00bc79-2207-410c-b9d5-d5d182ad514f ******** PAC-DEV-001 microsoft.authorization/roledefinitions 0b00bc79-2207-410c-b9d5-d5d182ad514f 0 0 0 0 0 0"},{"location":"export-policy-exemptions/","title":"Exporting Policy Exemptions","text":"<p>The script <code>Get-AzExemptions.ps1</code> retrieves Policy Exemptions from an EPAC environment and saves them to files in JSON and CSV format. These files can be used as starting points for creating new exemptions.</p>"},{"location":"export-policy-exemptions/#script-parameters","title":"Script Parameters","text":"Parameter Description <code>PacEnvironmentSelector</code> Defines which Policy as Code (PAC) environment we are using, if omitted, the script prompts for a value. The values are read from <code>$DefinitionsRootFolder/global-settings.jsonc</code>. <code>DefinitionsRootFolder</code> Definitions folder path. Defaults to environment variable <code>$env:PAC_DEFINITIONS_FOLDER or './Definitions'</code>. <code>OutputFolder</code> Output Folder. Defaults to environment variable <code>$env:PAC_OUTPUT_FOLDER or './Outputs'</code>. <code>Interactive</code> Set to false if used non-interactive <code>FileExtension</code> File extension type for the output files. Valid values are json and jsonc. Defaults to json."},{"location":"export-policy-exemptions/#examples","title":"Examples","text":"<pre><code>.\\Get-AzExemptions.ps1 -PacEnvironmentSelector \"dev\" -DefinitionsRootFolder \"C:\\Src\\Definitions\" -OutputFolder \"C:\\Src\\Outputs\" -Interactive $true -FileExtension \"jsonc\"\n</code></pre> <pre><code>.\\Get-AzExemptions.ps1 -Interactive $true\n</code></pre> <pre><code>.\\Get-AzExemptions.ps1 -Interactive $true -FileExtension \"jsonc\"\n</code></pre> <pre><code>.\\Get-AzExemptions.ps1 -Interactive $true -FileExtension \"json\"\n</code></pre> <pre><code>.\\Get-AzExemptions.ps1 -Interactive $true -FileExtension \"csv\"\n</code></pre> <pre><code>.\\Get-AzExemptions.ps1 -Interactive $true -FileExtension \"csv\" -OutputFolder \"C:\\Src\\Outputs\"\n</code></pre>"},{"location":"export-policy-exemptions/#links","title":"Links","text":"<ul> <li>Policy Exemptions</li> </ul>"},{"location":"extract-existing-policy-resources/","title":"Extract existing Policy Resources from an Environment in EPAC Format","text":"<p>Script <code>Export-AzPolicyResources.ps1</code> (Operations) extracts existing Policies, Policy Sets, and Policy Assignments and Exemptions outputing them in EPAC format into subfolders in folder <code>$outputFolders/Definitions</code>. The subfolders are <code>policyDefinitions</code>, <code>policySetDefinitions</code>, <code>policyAssignments</code> and <code>policyExemptions</code>. In a new EPAC instance these subfolders can be directly copied to the <code>Definitions</code> folder enabling an initial transition from a pre-EPAC to EPAC environment.</p> <p>The scripts creates a <code>Definitions</code> folder in the <code>outputFolder</code> and subfolders for <code>policyDefinitions</code>, <code>policySetDefinitions</code> and <code>policyAssignments</code>. To use the generated files copy them to your <code>Definitions</code> folder.</p> <ul> <li><code>policyDefinitions</code>, <code>policySetDefinitions</code> have a subfolder based on <code>metadata.category</code>. If the definition has no <code>category</code> <code>metadata</code> they are put in a subfolder labeled <code>Unknown Category</code>. Duplicates when including child scopes are sorted into the <code>Duplicates</code> folder. Creates one file per Policy and Policy Set.</li> <li><code>policyAssignments</code> creates one file per unique assigned Policy or Policy Set spanning multiple Assignments.</li> <li><code>policyExemptions</code> creates one subfolder per EPAC environment</li> </ul> <p>The script works for two principal use cases indicated by three modes:</p>"},{"location":"extract-existing-policy-resources/#use-case-1-interactive-or-non-interactive-single-tenant","title":"Use case 1: Interactive or non-interactive single tenant","text":"<p><code>-Mode 'export'</code> is used to collect the Policy resources and generate the definitions file. This works for <code>-Interactive $true</code> (the default) to extract Policy resources in single tenant or multi-tenant scenario, prompting the user to logon to each new tenant in turn.</p> <p>It also works for a single tenant scenario for an automated collection, assuming that the Service Principal has read permissions for every EPAC Environment in <code>global-settings.jsonc</code>.</p> <pre><code>Export-AzPolicyResources\n</code></pre> <p>The parameter <code>-InputPacSelector</code> can be used to only extract Policy resources for one of the EPAC environments.</p> <p>Warning</p> <p>The script deletes the <code>$outputFolders/Definitions</code> folder before creating a new set of files. In interactive mode it will ask for confirmation before deleting the directory.</p>"},{"location":"extract-existing-policy-resources/#use-case-2-non-interactive-multi-tenant","title":"Use case 2: Non-interactive multi-tenant","text":"<p>While this pattern can be used for interactive users too, it is most often used for multi-tenant non-interactive usage since an SPN is bound to a tenant and the script cannot prompt for new credentials.</p> <p>The solution is a multi-step process:</p> <p>Collect the raw information for very EPAC environment after logging into each EPAC environment (tenant):</p> <pre><code>Connect-AzAccount -Environment $cloud -Tenant $tenantIdForDev\nExport-AzPolicyResources -Interactive $false -Mode collectRawFile -InputPacSelector 'epac-dev'\n\nConnect-AzAccount -Environment $cloud -Tenant $tenantId1\nExport-AzPolicyResources -Interactive $false -Mode collectRawFile -InputPacSelector 'tenant1'\n\nConnect-AzAccount -Environment $cloud -Tenant $tenantId2\nExport-AzPolicyResources -Interactive $false -Mode collectRawFile -InputPacSelector 'tenant2'\n</code></pre> <p>Next, the collected raw files are used to generate the same output:</p> <pre><code>Export-AzPolicyResources -Interactive $false -Mode exportFromRawFiles\n</code></pre> <p>Warning</p> <p>This last script deletes the <code>$outputFolders/Definitions</code> folder before creating a new set of files.</p>"},{"location":"extract-existing-policy-resources/#caveats","title":"Caveats","text":"<p>The extractions are subject to the following assumptions and caveats:</p> <ul> <li>Assumes Policies and Policy Sets with the same name define the same properties independent of scope and EPAC environment.</li> <li>Ignores Assignments auto-assigned by Defender for Cloud. This behavior can be overridden with the switch parameter <code>-IncludeAutoAssigned</code>.</li> </ul>"},{"location":"extract-existing-policy-resources/#script-parameters","title":"Script parameters","text":"Parameter Explanation <code>DefinitionsRootFolder</code> Definitions folder path. Defaults to environment variable <code>$env:PAC_DEFINITIONS_FOLDER</code> or <code>./Definitions</code>. It contains <code>global-settings.jsonc</code>. <code>OutputFolder</code> Output Folder. Defaults to environment variable <code>$env:PAC_OUTPUT_FOLDER</code> or <code>./Outputs</code>. <code>Interactive</code> Script is being run interactively and can request az login. It will also prompt for each file to process or skip. Defaults to $true. <code>IncludeChildScopes</code> Switch parameter to include Policies and Policy Sets in child scopes; child scopes are normally ignored for definitions. This does not impact Policy Assignments. <code>IncludeAutoAssigned</code> Switch parameter to include Assignments auto-assigned by Defender for Cloud. <code>ExemptionFiles</code> Create Exemption files (none=suppress, csv=as a csv file, json=as a json or jsonc file). Defaults to 'csv'. <code>FileExtension</code> Controls the output files extension. Default is <code>jsonc</code> but <code>json</code> is also accepted <code>Mode</code> a) <code>export</code> exports EPAC environments, must be used with -Interactive in a multi-tenant scenario b) <code>collectRawFile</code> exports the raw data only; used with <code>InputPacSelector</code> when running non-Interactive in a multi-tenant scenario to collect the raw data once per tenant  c) <code>exportFromRawFiles</code> reads the files generated with one or more runs of b) and outputs the files like the normal 'export' without re-reading the environment. <code>InputPacSelector</code> Limits the collection to one EPAC environment, useful for non-Interactive use in a multi-tenant scenario, especially with -Mode 'collectRawFile'. Default is <code>'*'</code> which will execute all EPAC environments. This can be used in other scenarios."},{"location":"integrating-with-alz-monitor/","title":"Azure Baseline Monitor Alerts Integration","text":"<p>For users interested in deploying the Azure Monitor Baseline Alerts project with EPAC - these policies have been extracted and converted to the EPAC format and are available at the amba-export repository.</p> <p>Please review the <code>README</code> available in that repository for usage within EPAC.</p>"},{"location":"integrating-with-alz/","title":"Integrating EPAC with Azure Landing Zones","text":""},{"location":"integrating-with-alz/#rationale","title":"Rationale","text":"<p>Microsoft publishes and maintains a list of Policies, Policy Sets and Assignments which are deployed as part of the Cloud Adoption Framework Azure Landing Zones deployment. The central repository that contains these policies acts as the source of truth for ALZ deployments via the portal, Bicep and Terraform. A current list of policies which are deployed using these solutions is found at this link.</p> <p>To enable customers to use the Enterprise Policy as Code solution and combine Microsoft's policy recommendations there is a script which will pull the Policies, Policy Sets and Policy Assignments from the central repository and allow you to deploy them using this solution.</p> <p>As the policies and assignments change in main repository the base files in this solution can be updated to match.</p>"},{"location":"integrating-with-alz/#why-and-when-should-you-use-epac-to-manage-alz-deployed-policies","title":"Why and when should you use EPAC to manage ALZ deployed policies","text":"<p>EPAC can be used to manage Azure Policy deployed using ALZ Bicep or Terraform using the scenarios below. Some reasons you may want to switch to EPAC policy management include:</p> <ul> <li>You have existing unmanaged policies in a brownfield environment that you want to deploy in the new ALZ environment. Export the existing policies and manage them with EPAC alongside the ALZ policy objects.</li> <li>You have ALZ deployed in a non standard way e.g. multiple management group structures for testing, non-conventional management group structure. The default assignment structure provided by other ALZ deployment methods may not fit your strategy.</li> <li>A team that is not responsible for infrastructure deployment e.g. a security team may want to deploy and manage policies.</li> <li>You require features from policy not available in the ALZ deployments e.g. policy exemptions, documentation, assignment customization.</li> <li>Non-compliance reporting and remediation task management.</li> </ul> <p>Instructions are provided below for integrating with Bicep and Terraform deployments. </p>"},{"location":"integrating-with-alz/#scenarios","title":"Scenarios","text":"<p>There are two scenarios for integrating EPAC with ALZ.</p> <ol> <li>Existing Azure Landing Zone deployment and EPAC is to be used as the policy engine moving forward.</li> <li>Using EPAC to deploy and manage the Azure Landing Zone policies.</li> </ol>"},{"location":"integrating-with-alz/#scenario-1-existing-deployment","title":"Scenario 1 - Existing Deployment","text":"<p>With an existing Azure Landing Zone deployment you can use EPAC's extract scripts to extract the existing policies and assignments.</p> <ol> <li> <p>Install the EnterprisePolicyAsCode module from the PowerShell gallery and import it.</p> <pre><code>Install-Module EnterprisePolicyAsCode\nImport-Module EnterprisePolicyAsCode\n</code></pre> </li> <li> <p>Create a new policy definition folder structure using the command below.</p> <pre><code>New-EPACDefinitionFolder -DefinitionsRootFolder .\\Definitions\n</code></pre> </li> <li> <p>Update the <code>global-settings.json</code> file in the Definitions folder as described here</p> </li> <li> <p>Extract the existing policies from the environment by using the extract functionality as described here</p> <p>This will create in the <code>Output</code> folder a group of folders containing the extracted policies. Note that it extracts all policies in the environment including ones not deployed by any of the Azure Landing Zone deployments.</p> </li> <li> <p>Copy each of the folders in the <code>Output\\Definitions</code> folder to the <code>Definitions</code> folder you created above.</p> </li> <li> <p>At this point you can run the build script and generate a plan to validate what is going to be changed in the existing environment.</p> <pre><code>Build-DeploymentPlans -DefinitionsRootFolder Definitions -OutputFolder Output\n</code></pre> <p>In a newly deployed CAF environment with no other policies the results of the plan should be similar to below - EPAC will update each policy definition, set definition and assignment with a PacOwnerId</p> <pre><code>===================================================================================================\nSummary\n===================================================================================================\nPolicy counts:\n    0 unchanged\n    116 changes:\n        new     = 0\n        update  = 116\n        replace = 0\n        delete  = 0\nPolicy Set counts:\n    0 unchanged\n    7 changes:\n        new     = 0\n        update  = 7\n        replace = 0\n        delete  = 0\nPolicy Assignment counts:\n    0 unchanged\n    30 changes:\n        new     = 0\n        update  = 30\n        replace = 0\n        delete  = 0\nRole Assignment counts:\n    0 changes\n</code></pre> </li> <li> <p>Run the generated plan to deploy the policy objects</p> <pre><code>Deploy-PolicyPlan -DefinitionsRootFolder .\\Definitions -InputFolder .\\Output\n</code></pre> </li> <li> <p>Run the generated plan to update the role assignment objects</p> <pre><code>Deploy-RolesPlan -DefinitionsRootFolder .\\Definitions -InputFolder .\\Output\n</code></pre> </li> </ol> <p>If you have deployed the Azure Landing Zone accelerator using Bicep or Terraform - they support incremental updates as new features are released. If you are going to use EPAC to manage policies in the environment then follow the steps below depending on which tool you have used to do the landing zone deployment.</p>"},{"location":"integrating-with-alz/#bicep","title":"Bicep","text":"<ul> <li>Do not deploy the policy modules when upgrading the Azure Landing Zones. Use the process below to keep in sync with changes to ALZ policies.</li> </ul>"},{"location":"integrating-with-alz/#terraform","title":"Terraform","text":"<ul> <li>You must override the built-in management group archetypes to tell the Terraform module not to deploy policies. Sample files to replace the built-in archetypes are available in a repository here</li> </ul>"},{"location":"integrating-with-alz/#scenario-2-alz-policy-deployment-with-epac","title":"Scenario 2 - ALZ Policy Deployment with EPAC","text":"<p>To deploy the ALZ policies using EPAC follow the steps below.</p> <ol> <li> <p>Install the EnterprisePolicyAsCode module from the PowerShell gallery and import it.</p> <pre><code>Install-Module EnterprisePolicyAsCode\nImport-Module EnterprisePolicyAsCode\n</code></pre> </li> <li> <p>Create a new policy definition folder structure using the command below.</p> <pre><code>New-EPACDefinitionFolder -DefinitionsRootFolder .\\Definitions\n</code></pre> </li> <li> <p>Update the <code>global-settings.json</code> file in the Definitions folder as described here</p> </li> <li> <p>Synchronize the policies from the upstream repository. You should ensure that you are running the latest version of the EPAC module before running this script each time.</p> <pre><code>Sync-ALZPolicies -DefinitionsRootFolder .\\Definitions -CloudEnvironment AzureCloud\n# Also accepts AzureUSGovernment or AzureChinaCloud\n</code></pre> </li> <li> <p>Update the assignments scopes. Each assignment file has a default scope assigned to it - this need to be updated to reflect your environment and <code>global-settings.jsonc</code> file.</p> <p>For example:</p> <pre><code>{\n    \"$schema\": \"https://raw.githubusercontent.com/Azure/enterprise-azure-policy-as-code/main/Schemas/policy-assignment-schema.json\",\n    \"nodeName\": \"/Root/\",\n    \"scope\": {\n        \"tenant1\": [ // Replace with your EPAC environment name and validate the management group listed below exists\n            \"/providers/Microsoft.Management/managementGroups/toplevelmanagementgroup\"\n        ]\n    },\n    \"parameters\": {\n        \"logAnalytics\": \"\", // Replace with your central Log Analytics workspace ID\n        \"logAnalytics_1\": \"\", // Replace with your central Log Analytics workspace ID\n        \"emailSecurityContact\": \"\", // Security contact email address for Microsoft Defender for Cloud\n        \"ascExportResourceGroupName\": \"mdfc-export\", // Resource group to export Microsoft Defender for Cloud data to\n        \"ascExportResourceGroupLocation\": \"\" // Location of the resource group to export Microsoft Defender for Cloud data to\n}\n</code></pre> <p>If my top level management group had an ID of contoso and my PAC environments specified a production environment I would need to update the block as below.</p> <pre><code>{\n    \"nodeName\": \"/Root/\",\n    \"scope\": {\n        \"production\": [\n            \"/providers/Microsoft.Management/managementGroups/contoso\"\n        ]\n    },\n    \"parameters\": {\n        \"logAnalytics\": \"\",\n        \"logAnalytics_1\": \"\",\n        \"emailSecurityContact\": \"\",\n        \"ascExportResourceGroupName\": \"\",\n        \"ascExportResourceGroupLocation\": \"\"\n    }\n</code></pre> <p>Each assignment file corresponds to a management group deployed as part of the CAF Azure Landing Zone management group structure.</p> </li> <li> <p>Update assignment parameters.</p> <p>Several of the assignment files also have parameters which need to be in place. Pay attention to the requirements about having a Log Analytics workspace deployed prior to assigning these policies as it is a requirement for several of the assignments. Less generic parameters are also available for modification in the assignment files.</p> </li> <li> <p>Follow the normal steps to deploy the solution to the environment.</p> </li> </ol> <p>Tip</p> <p>Searching for comments in the assignment JSON files will show which values need to be updated.</p>"},{"location":"integrating-with-alz/#keeping-up-to-date-with-changes-manually","title":"Keeping up to date with changes manually","text":"<p>The Azure Landing Zone deployment contains a number of policies which help provide guardrails to an environment, and the team which works on these policies is always providing updates to the original content to keep in line with Microsoft best practice and road map. The EPAC solution contains a function to help synchronize changes from the upstream project</p> <p>To pull the latest changes from the upstream repository - use the code below.</p> <pre><code>Sync-ALZPolicies -DefinitionsRootFolder .\\Definitions -CloudEnvironment AzureCloud # Also accepts AzureUSGovernment or AzureChinaCloud\n</code></pre> <p>Carefully review the proposed changes before deploying them. It is best to make sure you're project is stored in source control so you can easily see which files have changed before deployment.</p> <p>Warning</p> <p>If you have follow Scenario 1 above, the first time you run the <code>Sync-ALZPolicies</code> there will be many changes recorded due to formatting. Review the files completely before deploying.</p> <p>Note</p> <p>Assignments deployed via the ALZ accelerators are kept in sync with the EnterprisePolicyAsCode module so ensure you have the latest PowerShell module installed before running <code>Sync-ALZPolicies</code></p> <p>Tip</p> <p>Rename or copy the default ALZ assignment files - when you do a sync it makes it easier to compare changes. </p>"},{"location":"integrating-with-alz/#keeping-up-to-date-with-github-actions","title":"Keeping up to date with GitHub Actions","text":"<p>There is a GitHub action workflow which executes the above script. The process for configuring it is below.</p> <ol> <li>Copy the <code>alz-sync.yaml</code> file from here to <code>.github\\workflows\\alz-sync.yaml</code> in your repository.</li> <li> <p>Update the <code>env:</code> section with details below</p> Environment Variable Name Value Notes REVIEWER Add a GitHub user to review the PR definitionsRootFolder The folder containing <code>global-settings.jsonc</code> and definitions </li> <li> <p>Run the workflow - new policies will be synced from the source.</p> </li> <li>Before merging the PR - checkout the branch and confirm that changes. Note that the sync script will overwrite the default assignments so ensure you compare for new functionality before reverting.</li> <li>When changes are confirmed - merge the PR.</li> </ol>"},{"location":"integrating-with-slz/","title":"Sovereign Landing Zone (SLZ) - Sovereignty Policy Baseline Integration","text":"<p>For users interested in deploying the Sovereignty Policy Baseline project with EPAC - these policies have been extracted and converted to the EPAC format and are available at the spb-export repository.</p> <p>Please review the <code>README</code> available in that repository for usage within EPAC.</p>"},{"location":"operating-environment/","title":"Operating Environment","text":""},{"location":"operating-environment/#epac-software-requirements","title":"EPAC Software Requirements","text":"<p>Your operating environment will include two repos, a runner, and at least one developer machine. The following software is required on the runners and any developer workstation.</p> <ul> <li>PowerShell 7.3.1 or later, 7.3.4 (latest) recommended</li> <li>PowerShell Modules</li> <li>Az required 9.3.0 or later - 9.2.x has a bug which causes EPAC to fail</li> <li>ImportExcel (required only if using Excel functionality)</li> <li>Git latest version</li> </ul>"},{"location":"operating-environment/#pipeline-runner-or-agent","title":"Pipeline Runner or Agent","text":"<p>OS: Any that Support PowerShell versions above.</p> <ul> <li>Linux and Windows are fully supported by EPAC</li> <li>Mac OS might work; however, we have not tested this scenario.</li> </ul> <p>Software: Must Meet EPAC Software Requirements.</p>"},{"location":"operating-environment/#developer-workstation","title":"Developer Workstation","text":"<ul> <li>Software: Must meet EPAC Software Requirements.</li> <li>Software Recommendations: Visual Studio Code 1.74.3 or later (may work with older versions)</li> </ul>"},{"location":"operating-environment/#required-management-groups-and-subscriptions","title":"Required Management Groups and Subscriptions","text":"<p>This solution requires EPAC environments for development, (optional) integration, and production per Azure tenant. These EPAC environments are not the same as the standard Azure environments for applications or solutions - do not confuse them; EPAC non-prod environment are only for development and integration of Azure Policy.  The standard Azure Sandbox, DEV, DEVINT, TEST/QA and PROD app solution environments are managed with Policy deployed from the EPAC PROD environment.</p> <ul> <li>Build a management group dedicated to Policy as Code (PaC) -- <code>mg-epac-dev</code> https://docs.microsoft.com/en-us/azure/governance/management-groups/create-management-group-portal</li> <li>Create management groups or subscriptions to simulate your EPAC production environments.</li> </ul>"},{"location":"operating-environment/#security-considerations-for-devops-cicd-runnersagents","title":"Security Considerations for DevOps CI/CD Runners/Agents","text":"<p>Agents (also called runners) are often hosted in VMs within Azure itself. It is therefore essential to manage them as highly privileged devices.</p> <ul> <li>Utilize hardened images.</li> <li>Be managed as high-privilege assets to minimize the risk of compromise.</li> <li>Only used for a single purpose.</li> <li>Hosted in PROD tenant in multi-tenant scenarios.</li> <li>Hosted in the hub VNET or a shared services VNET.</li> </ul>"},{"location":"operational-scripts/","title":"Operational Scripts","text":""},{"location":"operational-scripts/#build-definitionsfolderps1","title":"Build-DefinitionsFolder.ps1","text":"<p>This script has been replaced by <code>Export-AzPolicyResources.ps1</code>. See Extract existing Policy Resources from an Environment.</p>"},{"location":"operational-scripts/#build-policydocumentationps1","title":"Build-PolicyDocumentation.ps1","text":"<p>Builds documentation from instructions in policyDocumentations folder reading the deployed Policy Resources from the EPAC environment.</p> Parameter Explanation <code>DefinitionsRootFolder</code> Defines which Policy as Code (PAC) environment we are using, if omitted, the script prompts for a value. The values are read from <code>$DefinitionsRootFolder/global-settings.jsonc</code>. <code>DefinitionsRootFolder</code> Definitions folder path. Defaults to environment variable <code>$env:PAC_DEFINITIONS_FOLDER</code> or <code>./Definitions</code>. It contains <code>global-settings.jsonc</code>. <code>OutputFileName</code> Output file name. Defaults to environment variable <code>$env:PAC_OUTPUT_FOLDER/Tags/missing-tags-results.csv</code> or <code>./Outputs/Tags/missing-tags-results.csv</code>. <code>Interactive</code> Script is being run interactively and can request az login. Defaults to $false if PacEnvironmentSelector parameter provided and $true otherwise."},{"location":"operational-scripts/#create-azremediationtasksps1","title":"Create-AzRemediationTasks.ps1","text":"<p>This PowerShell script creates remediation tasks for all non-compliant resources in the current Azure Active Directory (AAD) tenant. If one or multiple remediation tasks fail, their respective objects are added to a PowerShell variable that is outputted for later use in the Azure DevOps Pipeline.</p> Parameter Explanation <code>PacEnvironmentSelector</code> Defines which Policy as Code (PAC) environment we are using, if omitted, the script prompts for a value. The values are read from <code>$DefinitionsRootFolder/global-settings.jsonc</code>. <code>DefinitionsRootFolder</code> Definitions folder path. Defaults to environment variable <code>$env:PAC_DEFINITIONS_FOLDER</code> or <code>./Definitions</code>. <code>Interactive</code> Set to false if used non-interactive. <code>OnlyCheckManagedAssignments</code> Include non-compliance data only for Policy assignments owned by this Policy as Code repo. <code>PolicyDefinitionFilter</code> Filter by Policy definition names (array) or ids (array). <code>PolicySetDefinitionFilter</code> Filter by Policy Set definition names (array) or ids (array). <code>PolicyAssignmentFilter</code> Filter by Policy Assignment names (array) or ids (array). <code>PolicyEffectFilter</code> Filter by Policy effect (array)."},{"location":"operational-scripts/#examples","title":"Examples","text":"<ol> <li> <p><code>Create-AzRemediationTasks.ps1 -PacEnvironmentSelector \"dev\"</code></p> </li> <li> <p><code>Create-AzRemediationTasks.ps1 -PacEnvironmentSelector \"dev\" -DefinitionsRootFolder \"C:\\git\\policy-as-code\\Definitions\"</code></p> </li> <li> <p><code>Create-AzRemediationTasks.ps1 -PacEnvironmentSelector \"dev\" -DefinitionsRootFolder \"C:\\git\\policy-as-code\\Definitions\" -Interactive $false</code></p> </li> <li> <p><code>Create-AzRemediationTasks.ps1 -PacEnvironmentSelector \"dev\" -DefinitionsRootFolder \"C:\\git\\policy-as-code\\Definitions\" -OnlyCheckManagedAssignments</code></p> </li> <li> <p><code>Create-AzRemediationTasks.ps1 -PacEnvironmentSelector \"dev\" -DefinitionsRootFolder \"C:\\git\\policy-as-code\\Definitions\" -PolicyDefinitionFilter \"Require tag 'Owner' on resource groups\" -PolicySetDefinitionFilter \"Require tag 'Owner' on resource groups\" -PolicyAssignmentFilter \"Require tag 'Owner' on resource groups\"</code></p> </li> </ol>"},{"location":"operational-scripts/#inputs","title":"Inputs","text":"<p>None.</p>"},{"location":"operational-scripts/#outputs","title":"Outputs","text":"<p>The Create-AzRemediationTasks.ps1 PowerShell script outputs multiple string values for logging purposes, a JSON string containing all the failed Remediation Tasks and a boolean value, both of which are used in a later stage of the Azure DevOps Pipeline.</p>"},{"location":"operational-scripts/#create-azuredevopsbugps1","title":"Create-AzureDevOpsBug.ps1","text":"<p>This PowerShell script creates a Bug when there are one or multiple failed Remediation Tasks.</p> <p>The Create-AzureDevOpsBug.ps1 PowerShell script creates a Bug on the current Iteration of a team when one or multiple Remediation Tasks failed. The Bug is formatted as an HTML table and contains information on the name and Url properties. As a result, the team can easily locate and resolve the Remediation Tasks that failed.</p> Parameter Explanation <code>FailedPolicyRemediationTasksJsonString</code> Specifies the JSON string that contains the objects of one or multiple failed Remediation Tasks. <code>ModuleName</code> Specifies the name of the PowerShell module installed at the beginning of the PowerShell script. By default, this is the VSTeam PowerShell Module. <code>OrganizationName</code> Specifies the name of the Azure DevOps Organization. <code>ProjectName</code> Specifies the name of the Azure DevOps Project. <code>PersonalAccessToken</code> Specifies the Personal Access Token that is used for authentication purposes. Make sure that you use the AzureKeyVault@2 task for this purpose. <code>TeamName</code> Specifies the name of the Azure DevOps team."},{"location":"operational-scripts/#example","title":"Example","text":"<p><code>Create-AzureDevOpsBug.ps1    -FailedPolicyRemediationTasksJsonString '&lt;JSON string&gt;' -ModuleName 'VSTeam'  -OrganizationName 'bavanben' -ProjectName 'Contoso'  -PersonalAccessToken '&lt;secret string&gt;' -TeamName 'Contoso Team'</code></p>"},{"location":"operational-scripts/#create-githubissueps1","title":"Create-GitHubIssue.ps1","text":"<p>This PowerShell script creates an Issue when there are one or multiple failed Remediation Tasks.</p> <p>The Create-GitHubIssue.ps1 PowerShell script creates an Issue in a GitHub Repository that is located under a GitHub Organization when one or multiple Remediation Tasks failed. The Bug is formatted as an HTML table and contains information on the name and Url properties. As a result, the team can easily locate and resolve the Remediation Tasks that failed.</p> Parameter Explanation <code>FailedPolicyRemediationTasksJsonString</code> Specifies the JSON string that contains the objects of one or multiple failed Remediation Tasks. <code>OrganizationName</code> Specifies the name of the GitHub Organization. <code>RepositoryName</code> Specifies the name of the GitHub Repository. <code>PersonalAccessToken</code> Specifies the Personal Access Token that is used for authentication purposes."},{"location":"operational-scripts/#example_1","title":"Example","text":"<p><code>Create-GitHubIssue.ps1   -FailedPolicyRemediationTasksJsonString '&lt;JSON string&gt;' -OrganizationName 'basvanbennekommsft'  -RepositoryName 'Blog-Posts' -PersonalAccessToken '&lt;secret string&gt;'</code></p>"},{"location":"operational-scripts/#export-azpolicyresourcesps1","title":"Export-AzPolicyResources.ps1","text":"<p>Exports Azure Policy resources in EPAC format or raw format. It has 4 operating modes - see -Mode parameter for details. It also generates documentation for the exported resources (can be suppressed with -SuppressDocumentation). To just generate EPAC formatted Definitions without generating documentation files, use -supressEpacOutput.</p> Parameter Explanation <code>DefinitionsRootFolder</code> Definitions folder path. Defaults to environment variable <code>$env:PAC_DEFINITIONS_FOLDER</code> or <code>./Definitions</code>. <code>OutputFolder</code> Output Folder. Defaults to environment variable <code>$env:PAC_OUTPUT_FOLDER</code> or <code>./Outputs</code>. <code>Interactive</code> Set to false if used non-interactive. Defaults to <code>$true</code>. <code>IncludeChildScopes</code> Switch parameter to include Policies and Policy Sets definitions in child scopes <code>IncludeAutoAssigned</code> Switch parameter to include Assignments auto-assigned by Defender for Cloud <code>ExemptionFiles</code> Create Exemption files (none=suppress, csv=as a csv file, json=as a json or jsonc file). Defaults to 'csv'. <code>FileExtension</code> File extension type for the output files. Defaults to '.jsonc'. <code>Mode</code> Operating mode: 'export', 'collectRawFile', 'exportFromRawFiles', 'exportRawToPipeline', 'psrule' <code>InputPacSelector</code> Limits the collection to one EPAC environment, useful for non-interactive use in a multi-tenant scenario, especially with -Mode 'collectRawFile'. The default is '*' which will execute all EPAC-Environments. <code>SuppressDocumentation</code> Suppress documentation generation. <code>SuppressEpacOutput</code> Suppress output generation in EPAC format. <code>PSRuleIgnoreFullScope</code> Ignore full scope for PsRule Extraction"},{"location":"operational-scripts/#example_2","title":"Example","text":"<p><code>Export-AzPolicyResources -DefinitionsRootFolder ./Definitions -OutputFolder ./Outputs -Interactive $true -IncludeChildScopes -IncludeAutoAssigned -ExemptionFiles csv -FileExtension jsonc -Mode export -InputPacSelector '\\*'</code></p>"},{"location":"operational-scripts/#export-noncompliancereportsps1","title":"Export-NonComplianceReports.ps1","text":"<p>Exports Non-Compliance Reports in CSV format.</p> Parameter Explanation <code>PacEnvironmentSelector</code> Defines which Policy as Code (PAC) environment we are using, if omitted, the script prompts for a value. The values are read from <code>$DefinitionsRootFolder/global-settings.jsonc</code>. <code>DefinitionsRootFolder</code> Definitions folder path. Defaults to environment variable <code>$env:PAC_DEFINITIONS_FOLDER</code> or <code>./Definitions</code>. <code>OutputFolder</code> Output Folder. Defaults to environment variable <code>$env:PAC_OUTPUT_FOLDER</code> or <code>./Outputs</code>. <code>WindowsNewLineCells</code> Formats CSV multi-object cells to use new lines and saves it as UTF-8 with BOM - works only for Excel in Windows. Default uses commas to separate array elements within a cell. <code>Interactive</code> Set to false if used non-interactive. <code>OnlyCheckManagedAssignments</code> Include non-compliance data only for Policy assignments owned by this Policy as Code repo. <code>PolicyDefinitionFilter</code> Filter by Policy definition names (array) or ids (array). <code>PolicySetDefinitionFilter</code> Filter by Policy Set definition names (array) or ids (array). <code>PolicyAssignmentFilter</code> Filter by Policy Assignment names (array) or ids (array). <code>PolicyEffectFilter</code> Filter by Policy Effect (array). <code>ExcludeManualPolicyEffect</code> Switch parameter to filter out Policy Effect Manual. <code>RemediationOnly</code> Filter by Policy Effect \"deployifnotexists\" and \"modify\" and compliance status \"NonCompliant\"."},{"location":"operational-scripts/#examples_1","title":"Examples","text":"<ol> <li> <p><code>Export-NonComplianceReports -PacEnvironmentSelector \"dev\"</code></p> </li> <li> <p><code>Export-NonComplianceReports -PacEnvironmentSelector \"dev\" -DefinitionsRootFolder \"C:\\MyPacRepo\\Definitions\" -OutputFolder \"C:\\MyPacRepo\\Outputs\"</code></p> </li> <li> <p><code>Export-NonComplianceReports -PacEnvironmentSelector \"dev\" -DefinitionsRootFolder \"C:\\MyPacRepo\\Definitions\" -OutputFolder \"C:\\MyPacRepo\\Outputs\" -WindowsNewLineCells</code></p> </li> <li> <p><code>Export-NonComplianceReports -PacEnvironmentSelector \"dev\" -DefinitionsRootFolder \"C:\\MyPacRepo\\Definitions\" -OutputFolder \"C:\\MyPacRepo\\Outputs\" -OnlyCheckManagedAssignments</code></p> </li> <li> <p><code>Export-NonComplianceReports -PolicySetDefinitionFilter \"org-sec-initiative\", \"/providers/Microsoft.Authorization/policySetDefinitions/11111111-1111-1111-1111-111111111111\"</code></p> </li> <li> <p><code>Export-NonComplianceReports -PolicyAssignmentFilter \"/providers/microsoft.management/managementgroups/11111111-1111-1111-1111-111111111111/providers/microsoft.authorization/policyassignments/taginh-env\", \"prod-asb\"</code></p> </li> <li> <p><code>Export-NonComplianceReports -PolicyEffectFilter \"deny\"</code></p> </li> <li> <p><code>Export-NonComplianceReports -PolicyEffectFilter \"deny\", \"audit\"</code></p> </li> <li> <p><code>Export-NonComplianceReports -ExcludeManualPolicyEffect</code></p> </li> </ol>"},{"location":"operational-scripts/#format-policynameps1","title":"Format-PolicyName.ps1","text":"<p>Formats a given display name into a scrubbed string that can be used as a policy name.</p> Parameter Explanation <code>DisplayName</code> The display name to be formatted."},{"location":"operational-scripts/#example_3","title":"Example","text":"<p><code>Format-PolicyName.ps1 -DisplayName \"My Policy Name\"</code></p>"},{"location":"operational-scripts/#get-azexemptionsps1","title":"Get-AzExemptions.ps1","text":"<p>Retrieves Policy Exemptions from an EPAC environment and saves them to files.</p> Parameter Explanation <code>PacEnvironmentSelector</code> Defines which Policy as Code (PAC) environment we are using, if omitted, the script prompts for a value. The values are read from <code>$DefinitionsRootFolder/global-settings.jsonc</code>. <code>DefinitionsRootFolder</code> Definitions folder path. Defaults to environment variable <code>$env:PAC_DEFINITIONS_FOLDER</code> or <code>./Definitions</code>. <code>OutputFolder</code> Output Folder. Defaults to environment variable <code>$env:PAC_OUTPUT_FOLDER</code> or <code>./Outputs</code>. <code>Interactive</code> Set to false if used non-interactive. <code>FileExtension</code> File extension type for the output files. Valid values are json and jsonc. Defaults to json. <code>ActiveExemptionsOnly</code> Set to true to only generate files for active (not expired and not orphaned) exemptions. Defaults to false."},{"location":"operational-scripts/#examples_2","title":"Examples","text":"<p><code>Get-AzExemptions.ps1 -PacEnvironmentSelector \"dev\" -DefinitionsRootFolder \"C:\\Src\\Definitions\" -OutputFolder \"C:\\Src\\Outputs\" -Interactive $true -FileExtension \"jsonc\"</code></p> <p><code>Get-AzExemptions.ps1 -Interactive $true</code></p>"},{"location":"operational-scripts/#get-azmissingtagsps1","title":"Get-AzMissingTags.ps1","text":"<p>Lists missing tags based on non-compliant Resource Groups.</p> Parameter Explanation <code>PacEnvironmentSelector</code> Defines which Policy as Code (PAC) environment we are using, if omitted, the script prompts for a value. The values are read from <code>$DefinitionsRootFolder/global-settings.jsonc</code>. <code>DefinitionsRootFolder</code> Definitions folder path. Defaults to environment variable <code>$env:PAC_DEFINITIONS_FOLDER</code> or <code>./Definitions</code>. It contains <code>global-settings.jsonc</code>. <code>OutputFileName</code> Output file name. Defaults to environment variable <code>$env:PAC_OUTPUT_FOLDER/Tags/missing-tags-results.csv</code> or <code>./Outputs/Tags/missing-tags-results.csv</code>. <code>Interactive</code> Script is being run interactively and can request az login. Defaults to $false if PacEnvironmentSelector parameter provided and $true otherwise."},{"location":"operational-scripts/#example_4","title":"Example","text":"<p><code>Get-AzMissingTags.ps1 -PacEnvironmentSelector \"dev\" -DefinitionsRootFolder \"C:\\Src\\Definitions\" -OutputFileName \"missing-tags-results.csv\" -Interactive $true</code></p>"},{"location":"operational-scripts/#get-azpolicyaliasoutputcsvps1","title":"Get-AzPolicyAliasOutputCSV.ps1","text":"<p>Pull all policy aliases into a CSV file. This is helpful for Azure Policy development.</p> Parameter Explanation <code>NamespaceMatch</code> Use this to cut out unnecessary aliases by specifying your desired namespace. More documentation here: https://learn.microsoft.com/en-us/powershell/module/az.resources/get-azpolicyalias?view=azps-8.3.0 <code>ResourceTypeMatch</code> Resource type match can also be used to filter out unnecessary aliases. More documentation here: https://learn.microsoft.com/en-us/powershell/module/az.resources/get-azpolicyalias?view=azps-8.3.0"},{"location":"operational-scripts/#example_5","title":"Example","text":"<p><code>Get-AzPolicyAliasOutputCSV.ps1 -OutputFileName \"PolicyAliases.csv\"</code></p>"},{"location":"operational-scripts/#get-azresourcetagsps1","title":"Get-AzResourceTags.ps1","text":"<p>Lists all resource tags in tenant.</p> Parameter Explanation <code>PacEnvironmentSelector</code> Defines which Policy as Code (PAC) environment we are using, if omitted, the script prompts for a value. The values are read from <code>$DefinitionsRootFolder/global-settings.jsonc</code>. <code>DefinitionsRootFolder</code> Definitions folder path. Defaults to environment variable <code>$env:PAC_DEFINITIONS_FOLDER</code> or <code>./Definitions</code>. It contains <code>global-settings.jsonc</code>. <code>OutputFileName</code> Output file name. Defaults to environment variable <code>$env:PAC_OUTPUT_FOLDER/Tags/all-tags.csv</code> or <code>./Outputs/Tags/all-tags.csv</code>. <code>Interactive</code> Script is being run interactively and can request az login. Defaults to $false if PacEnvironmentSelector parameter provided and $true otherwise."},{"location":"operational-scripts/#example_6","title":"Example","text":"<p><code>Get-AzResourceTags.ps1 -PacEnvironmentSelector \"dev\" -DefinitionsRootFolder \"C:\\Src\\Definitions\" -OutputFileName \"resource-tags-results.csv\" -Interactive $true</code></p>"},{"location":"operational-scripts/#get-azstoragenetworkconfigps1","title":"Get-AzStorageNetworkConfig.ps1","text":"<p>Lists Storage Account network configurations.</p> Parameter Explanation <code>PacEnvironmentSelector</code> Defines which Policy as Code (PAC) environment we are using, if omitted, the script prompts for a value. The values are read from <code>$DefinitionsRootFolder/global-settings.jsonc</code>. <code>DefinitionsRootFolder</code> Definitions folder path. Defaults to environment variable <code>$env:PAC_DEFINITIONS_FOLDER</code> or <code>./Definitions</code>. It contains <code>global-settings.jsonc</code>. <code>OutputFileName</code> Output file name. Defaults to environment variable <code>$env:PAC_OUTPUT_FOLDER/Storage/StorageNetwork.csv</code> or <code>./Outputs/Storage/StorageNetwork.csv</code> <code>Interactive</code> Script is being run interactively and can request az login. Defaults to $false if PacEnvironmentSelector parameter provided and $true otherwise."},{"location":"operational-scripts/#example_7","title":"Example","text":"<p><code>Get-AzStorageNetworkConfig.ps1 -PacEnvironmentSelector \"dev\" -DefinitionsRootFolder \"C:\\Src\\Definitions\" -OutputFileName \"StorageNetwork.csv\" -Interactive $true</code></p>"},{"location":"operational-scripts/#get-azuserroleassignmentsps1","title":"Get-AzUserRoleAssignments.ps1","text":"<p>Lists Role assignments per user.</p> Parameter Explanation <code>PacEnvironmentSelector</code> Defines which Policy as Code (PAC) environment we are using, if omitted, the script prompts for a value. The values are read from <code>$DefinitionsRootFolder/global-settings.jsonc</code>. <code>DefinitionsRootFolder</code> Definitions folder path. Defaults to environment variable <code>$env:PAC_DEFINITIONS_FOLDER</code> or <code>./Definitions</code>. It contains <code>global-settings.jsonc</code>. <code>OutputFileName</code> Output file name. Defaults to environment variable <code>$env:PAC_OUTPUT_FOLDER/Users/RoleAssignments.csv</code> or <code>./Outputs/Users/RoleAssignments.csv</code> <code>Interactive</code> Script is being run interactively and can request az login. Defaults to $false if PacEnvironmentSelector parameter provided and $true otherwise."},{"location":"operational-scripts/#example_8","title":"Example","text":"<p><code>Get-AzUserRoleAssignments.ps1 -PacEnvironmentSelector \"dev\" -DefinitionsRootFolder \"C:\\Src\\Definitions\" -OutputFileName \"RoleAssignments.csv\" -Interactive $true</code></p>"},{"location":"operational-scripts/#new-azpolicyreaderroleps1","title":"New-AzPolicyReaderRole.ps1","text":"<p>Creates a custom role 'Policy Reader' that provides read access to all Policy resources for the purpose of planning the EPAC deployments.</p> Parameter Explanation <code>PacEnvironmentSelector</code> Defines which Policy as Code (PAC) environment we are using, if omitted, the script prompts for a value. The values are read from <code>$DefinitionsRootFolder/global-settings.jsonc</code>. <code>DefinitionsRootFolder</code> Definitions folder path. Defaults to environment variable <code>$env:PAC_DEFINITIONS_FOLDER</code> or <code>./Definitions</code>. <code>Interactive</code> Set to false if used non-interactive."},{"location":"operational-scripts/#examples_3","title":"Examples","text":"<p><code>New-AzPolicyReaderRole.ps1 -PacEnvironmentSelector \"dev\" -DefinitionsRootFolder \"C:\\Src\\Definitions\" -Interactive $true</code></p> <p><code>New-AzPolicyReaderRole.ps1 -Interactive $true</code></p>"},{"location":"operational-scripts/#new-epacdefinitionfolderps1","title":"New-EPACDefinitionFolder.ps1","text":"<p>Creates a new EPAC definition folder.</p> Parameter Explanation <code>DefinitionFolderName</code> The name of the new definition folder. <code>DefinitionsRootFolder</code> The root folder where the new definition folder will be created."},{"location":"operational-scripts/#example_9","title":"Example","text":"<p><code>New-EPACDefinitionFolder.ps1 -DefinitionFolderName \"MyNewDefinition\" -DefinitionsRootFolder \"C:\\Src\\Definitions\"</code></p>"},{"location":"operational-scripts/#new-epacglobalsettingsps1","title":"New-EPACGlobalSettings.ps1","text":"<p>Creates a global-settings.jsonc file with a new guid, managed identity location and tenant information.</p> Parameter Explanation <code>ManagedIdentityLocation</code> The Azure location to store the managed identities. <code>TenantId</code> The Azure tenant ID for the solution. <code>DefinitionsRootFolder</code> The folder path to where the New-EPACDefinitionsFolder command created the definitions root folder. <code>DeploymentRootScope</code> The root management group to export definitions and assignments."},{"location":"operational-scripts/#example_10","title":"Example","text":"<p><code>New-EPACGlobalSettings.ps1 -ManagedIdentityLocation NorthCentralUS -TenantId 00000000-0000-0000-0000-000000000000 -DefinitionsRootFolder C:\\definitions\\ -DeploymentRootScope /providers/Microsoft.Management/managementGroups/mgroup1</code></p>"},{"location":"operational-scripts/#new-epacpolicyassignmentdefinitionps1","title":"New-EPACPolicyAssignmentDefinition.ps1","text":"<p>Exports a policy assignment from Azure to a local file in the EPAC format. Provides a base template only - you may have to manipulate the file to fit in to your current assignment structure</p> Parameter Required Explanation <code>PolicyAssignmentId</code> Required Resource ID in Azure for the policy assignment you want to export <code>OutputFolder</code> Optional Output folder for the exported policy assignment - - default is JSON output to console"},{"location":"operational-scripts/#example_11","title":"Example","text":"<p><code>New-EPACPolicyAssignmentDefinition.ps1 -PolicyAssignmentId \"/providers/Microsoft.Authorization/policyAssignments/assignment1\" -OutputFolder \"C:\\Src\\Definitions\\Assignments\"</code></p>"},{"location":"operational-scripts/#new-epacpolicydefinitionps1","title":"New-EPACPolicyDefinition.ps1","text":"<p>Exports a Policy definition from Azure to a local file in the EPAC format.</p> Parameter Explanation <code>PolicyDefinitionId</code> The ID of the Policy definition to export. <code>OutputFolder</code> The folder where the exported Policy definition will be saved."},{"location":"operational-scripts/#example_12","title":"Example","text":"<p><code>New-EPACPolicyDefinition.ps1 -PolicyDefinitionId \"/providers/Microsoft.Management/managementGroups/epac/providers/Microsoft.Authorization/policyDefinitions/Append-KV-SoftDelete\" -OutputFolder</code></p>"},{"location":"policy-assignments/","title":"Policy Assignments","text":"<p>This chapter describes how Policy Assignments are handled by EPAC. To learn about how custom Policy and Policy Set definitions are managed, see the Policies and Policy Set Definitions.</p>"},{"location":"policy-assignments/#assignment-json-structure","title":"Assignment JSON structure","text":"<p>Assignment JSON is hierarchical for efficient definitions, avoiding duplication (copy/paste) of JSON. Each branch of the tree is cumulative. Each tree node must include a <code>nodeName</code> - an arbitrary string exclusively used by EPAC to display an error location. EPAC concatenates a leading <code>/</code> and the nodeName entries encountered in the tree to create a \"breadcrumbs\" trail; therefore, we recommend that you use <code>/</code> to help separate the concatenated <code>nodeName</code>. The following (partial and invalid) assignment tree would create this error message.</p> <pre><code>{\n  \"nodeName\": \"/Security/\",\n  \"definitionEntry\": {\n    \"policySetName\": \"org-sec-initiative\",\n  },\n  \"children\": [\n    {\n      \"nodeName\": \"Prod/\",\n      \"parameters\": {\n        \"some-effect\": \"Deny\",\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"policy-assignments/#json-schema","title":"JSON Schema","text":"<p>The GitHub repo contains a JSON schema which can be used in tools such as VS Code to provide code completion.</p> <p>To utilize the schema add a <code>$schema</code> tag to the JSON file.</p> <pre><code>{\n  \"$schema\": \"https://raw.githubusercontent.com/Azure/enterprise-azure-policy-as-code/main/Schemas/policy-assignment-schema.json\"\n}\n</code></pre> <p>This schema is new in v7.4.x and may not be complete. Please let us know if we missed anything.</p>"},{"location":"policy-assignments/#key-points","title":"Key Points","text":"<ul> <li>Every tree branch must accumulate a <code>definitionEntry</code> (or <code>definitionEntryList</code>), Assignment naming (<code>name</code> and <code>displayName</code>) and <code>scope</code> element.</li> <li>The elements <code>parameters</code>, <code>overrides</code>, <code>resourceSelectors</code>, <code>notScope</code>, <code>enforcementMode</code>, <code>metadata</code>, <code>userAssignedIdentity</code>, <code>managedIdentityLocations</code>,<code>additionalRoleAssignments</code>and<code>nonComplianceMessages</code> are optional.</li> <li>For Policy Sets with large numbers of included Policies you should use a spreadsheet (CSV file) to manage effects (parameterized or effect <code>overrides</code>), <code>parameters</code> and optional <code>nonComplianceMessages</code>. We recommend the CSV approach for Policy Sets with more than 10 included Policies.</li> <li>EPAC continues to support deprecated elements <code>initiativeId</code>, <code>initiativeName</code> and <code>ignoreBranch</code>, Consider using their replacements <code>policySetId</code>, <code>policySetName</code> and <code>enforcementMode</code> instead.</li> </ul> <p>Note</p> <p>The tree is not required to be balanced. The number of levels is not restricted; however, anything beyond 3 levels is unnecessary in real scenarios and would be difficult to read and manage as the depth increases.</p>"},{"location":"policy-assignments/#tree-structure","title":"Tree Structure","text":""},{"location":"policy-assignments/#assignment-naming-element","title":"Assignment Naming Element","text":"<p>Each Assignment is required to have a <code>name</code> which is used in it's resource id. EPAC also requires a <code>displayName</code>. The <code>description</code> is optional. For the allowed location assignment you specify the component with:</p> <pre><code>\"assignment\": {\n    \"name\": \"allowed-locations\",\n    \"displayName\": \"Allowed Locations\",\n    \"description\": \"Sets the allowed locations.\"\n},\n</code></pre> <p>Multiple <code>assignment</code> naming components in a tree branch are string concatenated for each of the three fields.</p> <p>Warning</p> <p>Azure has a limit of 24 characters for the concatenated <code>name</code> string. EPAC displays an error if this limit is exceeded.</p>"},{"location":"policy-assignments/#assigning-policy-sets-or-policies","title":"Assigning Policy Sets or Policies","text":"<p>Each assignment assigns either a Policy or Policy Set. In EPAC this is done with a <code>definitionEntry</code> or a <code>definitionEntryList</code>. Exactly one occurrence must exist in any collated tree branch. For each entry, you need to specify one of the following:</p> <ul> <li><code>policyName</code> - custom Policy managed by EPAC. Specifying just the name allows EPAC to inject the correct definition scope.</li> <li><code>policySetName</code> - custom Policy Set managed by EPAC.</li> <li><code>policyId</code> - resource id for builtin Policy.</li> <li><code>policySetId</code> - resource id for builtin Policy Set.</li> </ul> <p><code>displayName</code> is an optional field to document the entry if the Policy name is a GUID. Builtin Policies and Policy Sets use a GUID.</p> <pre><code>\"definitionEntry\": {\n    \"policySetName\": \"general-allowed-locations-policy-set\",\n    \"displayName\": \"Use this if the Policy name is a GUID\"\n},\n</code></pre> <p>Using <code>definitionEntryList</code> allows you to save on copy/paste tree branches. Without it, the number of branches would need to be duplicated as many times as the list has entries.</p> <p>Each entry in the list creates an Assignment at each leaf of the tree. Since assignments must have unique names at a specific scope, the Assignment naming component must be amended for each list entry. In this sub-component you can decide if you want to concatenate the string by appending or prepending them by specifying <code>append</code> boolean value.</p> <pre><code>\"definitionEntryList\": [\n    {\n        \"policySetId\": \"/providers/Microsoft.Authorization/policySetDefinitions/1f3afdf9-d0c9-4c3d-847f-89da613e70a8\",\n        \"displayName\": \"Azure Security Benchmark\",\n        \"assignment\": {\n            \"append\": true,\n            \"name\": \"asb\",\n            \"displayName\": \"Azure Security Benchmark\",\n            \"description\": \"Azure Security Benchmark Initiative. \"\n        }\n    },\n    {\n        \"policySetId\": \"/providers/Microsoft.Authorization/policySetDefinitions/179d1daa-458f-4e47-8086-2a68d0d6c38f\",\n        \"displayName\": \"NIST SP 800-53 Rev. 5\",\n        \"assignment\": {\n            \"append\": true,\n            \"name\": \"nist-800-53-r5\",\n            \"displayName\": \"NIST SP 800-53 Rev. 5\",\n            \"description\": \"NIST SP 800-53 Rev. 5 Initiative.\"\n        }\n    }\n],\n</code></pre> <p>In the above example one of the children (leaf node) has the following Assignment name.</p> <pre><code>\"assignment\": {\n    \"name\": \"pr-\",\n    \"displayName\": \"Prod \",\n    \"description\": \"Prod Environment controls enforcement with \"\n},\n</code></pre> <p>This example generates two assignments at the \"prod\" leaf per scope:</p> <ul> <li>/providers/Microsoft.Management/managementGroups/Contoso-Prod/providers/Microsoft.Authorization/policyAssignments/pr-asb</li> <li><code>displayName</code> = \"Prod Azure Security Benchmark\"</li> <li><code>description</code> = \"Prod Environment controls enforcement with Azure Security Benchmark Initiative.\"</li> <li>/providers/Microsoft.Management/managementGroups/Contoso-Prod/providers/Microsoft.Authorization/policyAssignments/pr-nist-800-53-r5</li> <li><code>displayName</code> = \"Prod NIST SP 800-53 Rev. 5\"</li> <li><code>description</code> = \"Prod Environment controls enforcement with NIST SP 800-53 Rev. 5 Initiative.\"</li> </ul>"},{"location":"policy-assignments/#assignment-scopes-and-excluded-scopes","title":"Assignment scopes and excluded scopes","text":"<p><code>scope</code> is required exactly once in each tree branch. Excluded scopes (<code>notScope</code>) are cumulative from <code>global-settings.json</code> and the entire tree branch; however, once a scope is defined <code>notScope</code> may not be defined at any child node.</p> <p>Both <code>scope</code> and <code>notScope</code> are specific to an EPAC Environment using the pacSelector name, e.g., <code>epac-dev</code> and <code>tenant</code>.</p> <pre><code>\"scope\": {\n    \"epac-dev\": [\n        \"/providers/Microsoft.Management/managementGroups/Epac-Prod\"\n    ],\n    \"tenant\": [\n        \"/providers/Microsoft.Management/managementGroups/Contoso-Prod\"\n        \"/providers/Microsoft.Management/managementGroups/Contoso-Prod2\"\n    ]\n}\n</code></pre> <p><code>notScope</code> works the same. In addition <code>\"*\"</code> means all EPAC Environments which is most often used for <code>resourceGroupPatterns</code>.</p> <pre><code>\"notScope\": {\n    \"*\": [\n        \"/resourceGroupPatterns/excluded-rg*\"\n    ],\n    \"tenant\": [\n        \"/providers/Microsoft.Management/managementGroups/Epac\",\n        \"/providers/Microsoft.Management/managementGroups/\"\n    ]\n}\n</code></pre>"},{"location":"policy-assignments/#managed-identities-and-role-assignments","title":"Managed Identities and role assignments","text":"<p>Policies with a <code>DeployIfNotExists</code> or <code>Modify</code> effect need a Managed Identity (MI) and role assignments to execute remediation task. EPAC calculates the necessary role assignments based on the <code>roleDefinitionIds</code> in the Policy definition. By default EPAC uses a system-assigned Manged Identity. The team maintaining EPAC recommend system-assigned identities; however, your organization may have role assignment reasons to use user-assigned Managed Identities.</p>"},{"location":"policy-assignments/#defining-managedidentitylocations","title":"Defining <code>managedIdentityLocations</code>","text":"<p>Policy assignments requiring a Managed Identity (system-assigned or user-assigned) require a location <code>managedIdentityLocations</code>. You must specify the location based on EPAC Environment or use <code>\"*\"</code> to use the same location for all of the EPAC Environments. You can specify them in <code>global-settings.jsonc</code> or at any node in the tree. The last (closest to the leaf node) is the one chosen if multiple <code>managedIdentityLocations</code> entries are encountered in a tree branch.</p> <pre><code>\"managedIdentityLocations\": {\n    \"*\": \"eastus2\"\n},\n</code></pre>"},{"location":"policy-assignments/#defining-optional-additionalroleassignments","title":"Defining optional <code>additionalRoleAssignments</code>","text":"<p>In some scenarios you will need <code>additionalRoleAssignments</code>; e.g., for diagnostics settings to Event Hubs, the target resource might be in a different Management Group and therefore the Managed Identity requires additional role assignments. You must specify the <code>additionalRoleAssignments</code> based on EPAC Environment or use <code>\"*\"</code>to use the same <code>additionalRoleAssignments</code>for all of the EPAC Environments.</p> <pre><code>\"additionalRoleAssignments\": {\n    \"*\": [\n        {\n            \"roleDefinitionId\": \"/providers/microsoft.authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c\",\n            \"scope\": \"/subscriptions/&lt;id&gt;/resourceGroups/&lt;example&gt;\"\n        }\n    ]\n},\n</code></pre>"},{"location":"policy-assignments/#user-assigned-managed-identities","title":"User-assigned Managed Identities","text":"<p>Azure Policy can use a user-defined Managed Identity and EPAC allows you to use this functionality (new in version 7.0). You must specify the user-defined Managed Identity based on EPAC Environment or use <code>\"*\"</code> to use the same identity for all of the EPAC Environments (only possible in single tenant scenarios). Within each EPAC Environment entry, you can specify just the URI string indicating to use the same identity even if we are using a <code>definitionEntryList</code>, or in the case of a <code>definitionEntryList</code> can assign a different identity based on the definitionEntryList by specifying a matching <code>policyName</code>, <code>policyId</code>, <code>policySetName</code> or <code>policySetId</code>.</p> <pre><code>\"userAssignedIdentity\": {\n    // For single definitionEntry or when using the same identity for all definitions being assigned\n    \"tenant1\": \"/subscriptions/id/resourceGroups/testRG/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity-1\",\n    \"tenant2\": [\n      // differentiate by assigned definition\n      {\n          \"policySetName\": \"somePolicySetName\",\n          \"identity\": \"/subscriptions/id/resourceGroups/testRG/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity-2\"\n      },\n      {\n          \"policySetId\": \"somePolicySetId\",\n          \"identity\": \"/subscriptions/id/resourceGroups/testRG/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity-3\"\n      }\n    ]\n}\n</code></pre> <p>Note</p> <p>The rest (below) of the node components are optional.</p>"},{"location":"policy-assignments/#defining-parameters-with-json","title":"Defining <code>parameters</code> with JSON","text":"<p><code>parameters</code> have a simple JSON structure. You do not need the additional <code>value</code> indirection Azure requests (EPAC will inject that indirection).</p> <pre><code>\"parameters\": {\n  \"aksClusterContainersAllowedImagesExcludedNamespaces\": [\n    \"kube-system\",\n    \"gatekeeper-system\",\n    \"azure-arc\"\n  ],\n  \"kvKeysActiveMaximumNumberOfDays\": 90,\n  \"publicNetworkAccessShouldBeDisabledForContainerRegistriesEffect\": \"Audit\",\n  \"mysqlDisablePublicNetworkAccessEffect\": \"Deny\",\n  \"kvRsaCryptographyMinimumKeySizeEffect\": \"Deny\",\n},\n</code></pre> <p>Too enable <code>definitionEntryList</code>, parameters not present in the Policy or Policy Set definition are quietly ignored.</p>"},{"location":"policy-assignments/#defining-overrides-with-json","title":"Defining <code>overrides</code> with JSON","text":"<p><code>overrides</code> are in the same format as documented by Azure. They are  cumulative in each tree branch. The <code>selectors</code> element is only used for Assignments of Policy Sets. They are not valid for Assignments of a single Policy.</p> <p>If using <code>definitionEntryList</code>, you must add the <code>policyName</code>, <code>policyId</code>, <code>policySetName</code> or <code>policySetId</code> as used in the <code>definitionEntryList</code> item.</p> <pre><code>\"overrides\": [\n    {\n        \"policySetId\": \"/providers/Microsoft.Authorization/policySetDefinitions/179d1daa-458f-4e47-8086-2a68d0d6c38f\",\n        \"kind\": \"policyEffect\",\n        \"value\": \"AuditIfNotExists\",\n        \"selectors\": [\n            {\n                \"kind\": \"policyDefinitionReferenceId\",\n                \"in\": [\n                    \"331e8ea8-378a-410f-a2e5-ae22f38bb0da\",\n                    \"385f5831-96d4-41db-9a3c-cd3af78aaae6\"\n                ]\n            }\n        ]\n    },\n    {\n        \"policySetId\": \"/providers/Microsoft.Authorization/policySetDefinitions/179d1daa-458f-4e47-8086-2a68d0d6c38f\",\n        \"kind\": \"policyEffect\",\n        \"value\": \"AuditIfNotExists\",\n        \"selectors\": [\n            {\n                \"kind\": \"policyDefinitionReferenceId\",\n                \"in\": [\n                    \"cddd188c-4b82-4c48-a19d-ddf74ee66a01\",\n                    \"3cf2ab00-13f1-4d0c-8971-2ac904541a7e\"\n                ]\n            }\n        ]\n    }\n],\n</code></pre>"},{"location":"policy-assignments/#defining-noncompliancemessages-with-json","title":"Defining <code>nonComplianceMessages</code> with JSON","text":"<p>Assign a non-compliance message to the assignment, or individual non-compliance messages if the assignment is for an Policy Set. This value is an array of objects - each containing a message, and in the case of an initiative a policyDefinitionReferenceId. See this link for details.</p> <p>If you use single <code>definitionEntry</code>, place them normally. If you use a <code>definitionEntryList</code> place them in the respective list entry.</p> <pre><code>\"nonComplianceMessages\": [\n    {\n        \"message\": \"Update main message\"\n        // Default nonComplianceMessage\n    },\n    {\n        \"message\": \"Individual policy message\",\n        // Policy specific nonComplianceMessage. You must include the policyDefinitionReferenceId as defined in the Policy Set.\n        \"policyDefinitionReferenceId\": \"ASC_DeployAzureDefenderForSqlAdvancedThreatProtectionWindowsAgent\"\n    }\n],\n</code></pre>"},{"location":"policy-assignments/#defining-parameters-overrides-and-noncompliancemessages-with-a-csv-file","title":"Defining <code>parameters</code>, <code>overrides</code> and <code>nonComplianceMessages</code> with a CSV file","text":"<p>Assigning single or multiple security and compliance focused Policy Sets (Initiatives), such as Azure Security Benchmark, NIST 800-53 r5, PCI, NIST 800-171, etc, with just JSON parameters becomes very complex fast. Add to this the complexity of overriding the effect if it is not surfaced as a parameter in the Policy Set using <code>overrides</code>. Finally, adding the optional <code>nonComplianceMessages</code> further increases the complexity.</p> <p>To address the problem of reading and maintaining hundreds or thousands of JSON lines, EPAC can use the content of a spreadsheet (CSV) to create <code>parameters</code>, <code>overrides</code> and optionally <code>nonComplianceMessages</code> for a single Policy assignment <code>definitionEntry</code> or multiple Policy definitions (<code>definitionEntryList</code>).</p> <p>Note</p> <p>This approach is best for very large Policy Sets such as Azure Security Benchmark, NIST 800-53, etc. Smaller Policy Sets should still be handled with JSON <code>parameters</code>, <code>overrides</code> and <code>nonComplianceMessages</code>.</p> <p>Start by generating documentation for one or more of those Policy Sets, then modify the effect and parameter columns for each type of environment types you will use. In the example header below the infrastructure environments prod, test, dev, and sandbox are used as prefixes to the columns for Effect and Parameters respectively. Optionally you can add a column for <code>nonComplianceMessages</code>. If you want to switch from JSON to CSV, you can generate this CSV file frm your already deployed Assignment(s).</p> <p>The CSV file generated contains the following headers/columns:</p> <p><code>name,referencePath,policyType,category,displayName,description,groupNames,policySets,allowedEffects,allowedOverrides,prodEffect,testEffect,devEffect,sandboxEffect,prodParameters,testParameters,devParameters,sandboxParameters,nonComplianceMessages</code></p> <p>Column explanations:</p> <ul> <li><code>name</code> is the name of the policyDefinition referenced by the Policy Sets being assigned.</li> <li><code>referencePath</code> is only used if the Policy is used more than once in at least one of the Policy Sets to disambiguate them. The format is <code>&lt;policySetName&gt;//&lt;policyDefinitionReferenceId&gt;</code>.</li> <li><code>policyType</code>,<code>category</code>,<code>displayName</code>,<code>description</code>,<code>groupNames</code>,<code>policySets</code>,<code>allowedEffects</code> are optional and not used for deployment planning. They assist you in filling out the <code>&lt;env&gt;Effect</code> columns.</li> <li><code>&lt;env&gt;Effect</code> columns must contain one of the allowedValues or allowedOverrides values. You define which scopes define each type of environment and what short name you give the environment type to use as a column prefix.</li> <li><code>&lt;env&gt;Parameters</code> can contain additional parameters. You can also specify such parameters in JSON. EPAC will use the union of all parameters.</li> <li><code>nonComplianceMessages</code> column is optional. The documentation script does not generate this columns.</li> </ul> <p>EPAC will find the effect parameter name for each Policy in each Policy Set and use them. If no effect parameter is defined by the Policy Set, EPAC will use <code>overrides</code> to set the effect. EPAC will generate the <code>policyDefinitionReferenceId</code> for <code>nonComplianceMessages</code>.</p> <p>After building the spreadsheet, you must reference the CSV file and the column prefix in each tree branch. <code>parameterFile</code> can be overridden in a child node; however, it is often used once per tree branch and defined adjacent to the <code>'definitionEntry</code> or <code>definitionEntryList</code>.</p> <pre><code>\"parameterFile\": \"security-baseline-parameters.csv\",\n\"definitionEntryList\": [\n    {\n        \"policySetName\": \"1f3afdf9-d0c9-4c3d-847f-89da613e70a8\",\n        \"displayName\": \"Azure Security Benchmark\",\n        \"assignment\": {\n            \"append\": true,\n            \"name\": \"asb\",\n            \"displayName\": \"Azure Security Benchmark\",\n            \"description\": \"Azure Security Benchmark Initiative. \"\n        }\n    },\n    {\n        \"policySetName\": \"179d1daa-458f-4e47-8086-2a68d0d6c38f\",\n        \"displayName\": \"NIST SP 800-53 Rev. 5\",\n        \"assignment\": {\n            \"append\": true,\n            \"name\": \"nist-800-53-r5\",\n            \"displayName\": \"NIST SP 800-53 Rev. 5\",\n            \"description\": \"NIST SP 800-53 Rev. 5 Initiative.\"\n        }\n    }\n],\n</code></pre> <p>In the child nodes specifying the scope(s) specify which column prefix to use for selecting the CSV columns with <code>parameterSelector</code>. The actual prefix names have no meaning; they only need to match between the JSON below and the CSV file.</p> <pre><code>{\n    \"nodeName\": \"Prod/\",\n    \"assignment\": {\n        \"name\": \"pr-\",\n        \"displayName\": \"Prod \",\n        \"description\": \"Prod Environment controls enforcement with initiative \"\n    },\n    \"parameterSelector\": \"prod\",\n    \"scope\": {\n        \"epac-dev\": [\n            \"/providers/Microsoft.Management/managementGroups/Epac-Mg-Prod\"\n        ],\n        \"tenant\": [\n            \"/providers/Microsoft.Management/managementGroups/Contoso-Prod\"\n        ]\n    }\n},\n</code></pre> <p>The element <code>nonComplianceMessageColumn</code> may appear anywhere in the tree. Definitions at a child override the previous setting. If no <code>nonComplianceMessageColumn</code> is specified, the spreadsheet is not used for the (optional) <code>nonComplianceMessages</code>.</p> <pre><code>{\n    \"nodeName\": \"Prod/\",\n    \"assignment\": {\n        \"name\": \"pr-\",\n        \"displayName\": \"Prod \",\n        \"description\": \"Prod Environment controls enforcement with initiative \"\n    },\n    \"parameterSelector\": \"prod\",\n    \"nonComplianceMessageColumn\": \"nonComplianceMessages\"\n    \"scope\": {\n        \"epac-dev\": [\n            \"/providers/Microsoft.Management/managementGroups/Epac-Mg-Prod\"\n        ],\n        \"tenant\": [\n            \"/providers/Microsoft.Management/managementGroups/Contoso-Prod\"\n        ]\n    }\n},\n</code></pre>"},{"location":"policy-assignments/#defining-resourceselectors","title":"Defining <code>resourceSelectors</code>","text":"<p><code>resourceSelectors</code> may appear anywhere in the tree and are cumulative in any branch. They follow the standard Azure Format.</p> <pre><code>\"resourceSelectors\": [\n    {\n        \"name\": \"SDPRegions\",\n        \"selectors\": [\n            {\n                \"kind\": \"resourceLocation\",\n                \"in\": [ \"eastus\", \"westus\", \"centralus\", \"southcentralus\" ]\n            }\n        ]\n    }\n]\n</code></pre>"},{"location":"policy-assignments/#defining-metadata","title":"Defining <code>metadata</code>","text":"<p><code>metadata</code> is sometimes used to track tickets for changes. Do NOT specify EPAC-reserved elements <code>roles</code> and <code>pacOwnerId</code>. For the final <code>metadata</code> EPAC creates the union of instances in the entire tree branch.</p> <pre><code>\"metadata\": {\n    \"someItem\": \"Lorem Ipsum\"\n}\n</code></pre>"},{"location":"policy-assignments/#defining-enforcementmode","title":"Defining <code>enforcementMode</code>","text":"<p><code>enforcementMode</code> is similar to the deprecated <code>ignoreBranch</code>; it deploys the assignment and sets the assignment to <code>Default</code> or <code>DoNotEnforce</code>. <code>DoNotEnforce</code> allows a what-if analysis. <code>enforcementMode</code> may appear anywhere in the tree. Definitions at a child override the previous setting.</p> <pre><code>\"enforcementMode\": \"DoNotEnforce\",\n</code></pre>"},{"location":"policy-assignments/#example-assignment-files","title":"Example assignment files","text":""},{"location":"policy-assignments/#simple-policy-assignment-allowed-locations","title":"Simple Policy Assignment (Allowed Locations)","text":"<p>In the simple case an assignment is a single assignment or with no difference in <code>assignment</code>, <code>parameters</code>, and <code>definitionEntry</code> across multiple scopes. In many scenarios \"Allowed Locations\" is such a simple Assignment. Such Assignments do not have child nodes, just the root node.</p> <pre><code>{\n  \"nodeName\": \"/root\",\n  \"definitionEntry\": {\n    \"displayName\": \"Allowed Locations Initiative\",\n    \"policySetName\": \"general-allowed-locations-policy-set\"\n  },\n  \"assignment\": {\n    \"name\": \"allowed-locations\",\n    \"displayName\": \"Allowed Locations\",\n    \"description\": \"Sets the allowed locations\"\n  },\n  \"metadata\": {},\n  \"enforcementMode\": \"Default\",\n  \"parameters\": {\n    \"AllowedLocations\": [\n      \"centralus\",\n      \"eastus\",\n      \"eastus2\",\n      \"southcentralus\"\n    ]\n  },\n  \"scope\": {\n    \"epac-dev\": [\n      \"/providers/Microsoft.Management/managementGroups/Epac-Mg-1\"\n    ],\n    \"tenant\": [\n      \"/providers/Microsoft.Management/managementGroups/c\"\n    ]\n  }\n}\n</code></pre> <ul> <li><code>nodeName</code> is required for error messages; it's value is immaterial. EPAC concatenates them in the current tree branch.</li> <li><code>definitionEntry</code> specifies that the custom Policy Set <code>general-allowed-locations-policy-set</code> from our starter kit. <code>displayName</code> has no meaning - it is for readability and in this instance is superfluous.</li> <li><code>assignment</code> fields <code>name</code>, <code>displayName</code> and <code>description</code> are used when creating the assignment.</li> <li>This assignment has no <code>metadata</code>. You don't need an empty collection. EPAC will add <code>pacOwnerId</code> and <code>roles</code> <code>metadata</code>. Do not add them manually.</li> <li>enforcementMode is set to default - it is superfluous.</li> <li><code>parameters</code> are obvious. Note: you don't add the <code>value</code> layer Azure inserts - EPAC takes care of that.</li> <li><code>scope</code>:</li> <li>During Policy resource development (called <code>epac-dev</code>) the Assignment is deployed to an EPAC development Management Group <code>Epac-Mg-1</code>.</li> <li>During Policy prod deployments (<code>tenant</code>-wide), it is deployed to the tenant Management Group <code>Epac-Mg-1</code>.</li> <li>No <code>notScope</code> entries are specified.</li> </ul> <p>If we remove the empty and superfluous entries, we arrive at:</p> <pre><code>{\n  \"nodeName\": \"/root\",\n  \"definitionEntry\": {\n    \"policySetName\": \"general-allowed-locations-policy-set\"\n  },\n  \"assignment\": {\n    \"name\": \"allowed-locations\",\n    \"displayName\": \"Allowed Locations\",\n    \"description\": \"Sets the allowed locations\"\n  },\n  \"parameters\": {\n    \"AllowedLocations\": [\n      \"centralus\",\n      \"eastus\",\n      \"eastus2\",\n      \"southcentralus\"\n    ]\n  },\n  \"scope\": {\n    \"epac-dev\": [\n      \"/providers/Microsoft.Management/managementGroups/Epac-Mg-1\"\n    ],\n    \"tenant\": [\n      \"/providers/Microsoft.Management/managementGroups/c\"\n    ]\n  }\n}\n</code></pre>"},{"location":"policy-assignments/#security-focused-policy-assignment-with-json-parameters","title":"Security-Focused Policy Assignment with JSON parameters","text":"<ul> <li>In the following example we named our root node (<code>nodeName</code>) <code>/security/</code>. Since it is only used in case of error messages produced by EPAC during planning it's actual value doesn't matter as long as it's unique.</li> <li>We use a <code>definitionEntryList</code> to create two assignments at every leaf (six assignments total).</li> <li>For <code>assignment</code> string concatenation we append the strings in the <code>definitionEntryList</code> to the strings in the child nodes. You can see this best when you look at the <code>description</code> string in the child  nodes. It will form a sentence when concatenated by <code>append</code>ing the <code>definitionEntryList</code> <code>assignment</code> field <code>description</code>.</li> <li>The <code>parameters</code> specified in the children are specific to the IaC environment types and their <code>scope</code>. Note: a real assignment would define many more parameters. The set here is abbreviated since the actual set could easily exceed a hundred entries for each of the IaC environments. We'll see in the next example how to simplify large Policy Set parameters with a CSV file.</li> </ul> <pre><code>{\n  \"nodeName\": \"/Security/\",\n  \"definitionEntryList\": [\n    {\n      \"policySetId\": \"/providers/Microsoft.Authorization/policySetDefinitions/1f3afdf9-d0c9-4c3d-847f-89da613e70a8\",\n      \"displayName\": \"Azure Security Benchmark\",\n      \"assignment\": {\n        \"append\": true,\n        \"name\": \"asb\",\n        \"displayName\": \"Azure Security Benchmark\",\n        \"description\": \"Azure Security Benchmark Initiative.\"\n      }\n    },\n    {\n      \"policySetId\": \"/providers/Microsoft.Authorization/policySetDefinitions/179d1daa-458f-4e47-8086-2a68d0d6c38f\",\n      \"displayName\": \"NIST SP 800-53 Rev. 5\",\n      \"assignment\": {\n        \"append\": true,\n        \"name\": \"nist-800-53-r5\",\n        \"displayName\": \"NIST SP 800-53 Rev. 5\",\n        \"description\": \"NIST SP 800-53 Rev. 5 Initiative.\"\n      }\n    }\n  ],\n  \"children\": [\n    {\n      \"nodeName\": \"Prod/\",\n      \"assignment\": {\n        \"name\": \"pr-\",\n        \"displayName\": \"Prod \",\n        \"description\": \"Prod Environment controls enforcement with \"\n      },\n      \"parameters\": {\n        \"classicComputeVMsMonitoringEffect\": \"Deny\",\n        \"disallowPublicBlobAccessEffect\": \"deny\",\n        \"azureCosmosDBAccountsShouldHaveFirewallRulesMonitoringEffect\": \"Deny\",\n        \"allowedContainerImagesInKubernetesClusterEffect\": \"Audit\",\n        \"AllowedHostNetworkingAndPortsInKubernetesClusterEffect\": \"Disabled\",\n        \"clusterProtectionLevelInServiceFabricMonitoringEffect\": \"Deny\",\n      },\n      \"scope\": {\n        \"epac-dev\": [\n          \"/providers/Microsoft.Management/managementGroups/epac-dev-prod\"\n        ],\n        \"tenant\": [\n          \"/providers/Microsoft.Management/managementGroups/Contoso-Prod\"\n        ]\n      }\n    },\n    {\n      \"nodeName\": \"NonProd/\",\n      \"assignment\": {\n        \"name\": \"np-\",\n        \"displayName\": \"NonProd \",\n        \"description\": \"Non Prod Environment controls enforcement with \"\n      },\n      \"parameters\": {\n        \"classicComputeVMsMonitoringEffect\": \"Deny\",\n        \"disallowPublicBlobAccessEffect\": \"deny\",\n        \"azureCosmosDBAccountsShouldHaveFirewallRulesMonitoringEffect\": \"Audit\",\n        \"allowedContainerImagesInKubernetesClusterEffect\": \"Audit\",\n        \"AllowedHostNetworkingAndPortsInKubernetesClusterEffect\": \"Disabled\",\n        \"clusterProtectionLevelInServiceFabricMonitoringEffect\": \"Audit\",\n      },\n      \"scope\": {\n        \"epac-dev\": [\n          \"/providers/Microsoft.Management/managementGroups/epac-dev-nonprod\"\n        ],\n        \"tenant\": [\n          \"/providers/Microsoft.Management/managementGroups/Contoso-nonprod\"\n        ]\n      }\n    },\n    {\n      \"nodeName\": \"Sandbox/\",\n      \"assignment\": {\n        \"name\": \"sbx-\",\n        \"displayName\": \"Sandbox \",\n        \"description\": \"Sandbox Environment controls enforcement with \"\n      },\n      \"parameters\": {\n        \"classicStorageAccountsMonitoringEffect\": \"Deny\",\n        \"allowedServicePortsInKubernetesClusterEffect\": \"Disabled\",\n        \"certificatesValidityPeriodInMonths\": 13,\n        \"AllowedAppArmorProfilesInKubernetesClusterEffect\": \"Disabled\",\n        \"certificatesValidityPeriodMonitoringEffect\": \"disabled\",\n        \"cognitiveServicesAccountsShouldRestrictNetworkAccessMonitoringEffect\": \"Disabled\",\n        \"AllowedCapabilitiesInKubernetesClusterEffect\": \"Disabled\"\n      },\n      \"scope\": {\n        \"epac-dev\": [\n          \"/providers/Microsoft.Management/managementGroups/epac-dev-sandbox\"\n        ],\n        \"tenant\": [\n          \"/providers/Microsoft.Management/managementGroups/Contoso-Sandbox\"\n        ]\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"policy-assignments/#security-focused-policy-assignment-with-csv-file-parameters","title":"Security-Focused Policy Assignment with CSV file parameters","text":"<p>This example is the same as the previous, except we replaced inline JSON parameters with a CSV file and use the column prefixes in the CSV file to select which parameter values we use by:</p> <ul> <li>Setting the file name at the root node with</li> </ul> <p><code>json   \"parameterFile\": \"security-baseline-parameters.csv\",</code></p> <ul> <li>Setting the column prefix with <code>parameterSelector</code> to <code>prod</code>, <code>nonprod</code> and <code>sandbox</code>. For example:</li> </ul> <pre><code>\"parameterSelector\": \"prod\",\n</code></pre> <p>The CSV file is explained above. The entire file is:</p> <pre><code>{\n  \"nodeName\": \"/Security/\",\n  \"parameterFile\": \"security-baseline-parameters.csv\",\n  \"definitionEntryList\": [\n    {\n      \"policySetId\": \"/providers/Microsoft.Authorization/policySetDefinitions/1f3afdf9-d0c9-4c3d-847f-89da613e70a8\",\n      \"displayName\": \"Azure Security Benchmark\",\n      \"assignment\": {\n        \"append\": true,\n        \"name\": \"asb\",\n        \"displayName\": \"Azure Security Benchmark\",\n        \"description\": \"Azure Security Benchmark Initiative.\"\n      }\n    },\n    {\n      \"policySetId\": \"/providers/Microsoft.Authorization/policySetDefinitions/179d1daa-458f-4e47-8086-2a68d0d6c38f\",\n      \"displayName\": \"NIST SP 800-53 Rev. 5\",\n      \"assignment\": {\n        \"append\": true,\n        \"name\": \"nist-800-53-r5\",\n        \"displayName\": \"NIST SP 800-53 Rev. 5\",\n        \"description\": \"NIST SP 800-53 Rev. 5 Initiative.\"\n      }\n    }\n  ],\n  \"children\": [\n    {\n      \"nodeName\": \"Prod/\",\n      \"parameterSelector\": \"prod\",\n      \"assignment\": {\n        \"name\": \"pr-\",\n        \"displayName\": \"Prod \",\n        \"description\": \"Prod Environment controls enforcement with \"\n      },\n      \"scope\": {\n        \"epac-dev\": [\n          \"/providers/Microsoft.Management/managementGroups/epac-dev-prod\"\n        ],\n        \"tenant\": [\n          \"/providers/Microsoft.Management/managementGroups/Contoso-Prod\"\n        ]\n      }\n    },\n    {\n      \"nodeName\": \"NonProd/\",\n      \"parameterSelector\": \"nonprod\",\n      \"assignment\": {\n        \"name\": \"np-\",\n        \"displayName\": \"NonProd \",\n        \"description\": \"Non Prod Environment controls enforcement with \"\n      },\n      \"scope\": {\n        \"epac-dev\": [\n          \"/providers/Microsoft.Management/managementGroups/epac-dev-nonprod\"\n        ],\n        \"tenant\": [\n          \"/providers/Microsoft.Management/managementGroups/Contoso-nonprod\"\n        ]\n      }\n    },\n    {\n      \"nodeName\": \"Sandbox/\",\n      \"parameterSelector\": \"sandbox\",\n      \"assignment\": {\n        \"name\": \"sbx-\",\n        \"displayName\": \"Sandbox \",\n        \"description\": \"Sandbox Environment controls enforcement with \"\n      },\n      \"scope\": {\n        \"epac-dev\": [\n          \"/providers/Microsoft.Management/managementGroups/epac-dev-sandbox\"\n        ],\n        \"tenant\": [\n          \"/providers/Microsoft.Management/managementGroups/Contoso-Sandbox\"\n        ]\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"policy-assignments/#inverted-policy-assignment-tag-inheritance-and-required-tags","title":"Inverted Policy Assignment (Tag Inheritance and Required Tags)","text":"<p>As mentioned above sometimes it is advantageous (to reduce the number of repetitions) to turn a definition on its head:</p> <ul> <li>Common <code>parameters</code>, <code>scope</code>, <code>definitionEntryList</code> (with two Policies) at the root (<code>nodeName</code> is <code>/Tags/</code>).</li> <li>Start of the <code>assignment</code> strings (<code>append</code> is defaulted to <code>false</code>). Again look at description which will be a concatenated sentence.</li> <li>The children define the <code>tagName</code> parameter and the second part of the strings for <code>assignment</code>. The set of <code>parameters</code> is the union of the root node and the child node.</li> <li>This creates six Assignments (number of Policies assigned times number of children).</li> </ul> <pre><code>{\n  \"nodeName\": \"/Tags/\",\n  \"parameters\": {\n    \"excludedRG\": [\n      \"synapseworkspace-managedrg-*\",\n      \"databricks-rg-*\",\n      \"managed*\"\n    ]\n  },\n  \"scope\": {\n      \"epac-dev\": [\n          \"/providers/Microsoft.Management/managementGroups/epac-dev-mg-1\"\n      ],\n      \"tenant\": [\n          \"/providers/Microsoft.Management/managementGroups/Contoso-Root\"\n      ]\n  },\n  \"definitionEntryList\": [\n                    {\n                    \"policyName\": \"7ce92201-8036-4d55-938e-0dce0a5bc475\",\n                    \"displayName\": \"Require Tag on Resource Group with dynamic notScope\",\n                    \"assignment\": {\n                        \"name\": \"rgtag-\",\n                        \"displayName\": \"Require Tag on Resource Group - \",\n                        \"description\": \"Require Tag for Resource Groups when any resource group (not listed in in excludedRg) is created or updated - \"\n                    }\n                },\n                {\n                    \"policyName\": \"5cc2cbfc-e306-4ec6-a141-eea3c79bb2ae\",\n                    \"displayName\": \"Inherit Tag from Resource Group with dynamic notScope\",\n                    \"assignment\": {\n                        \"name\": \"taginh-\",\n                        \"displayName\": \"Inherit Tag from Resource Group - \",\n                        \"description\": \"Modify Tag to comply with governance goal of enforcing Tags by inheriting Tags from RG - \"\n                    }\n                }\n  ],\n  \"children\": [\n      {\n          \"nodeName\": \"AppName\",\n          \"assignment\": {\n              \"name\": \"AppName\",\n              \"displayName\": \"AppName\",\n              \"description\": \"AppName.\"\n          },\n          \"parameters\": {\n              \"tagName\": \"AppName\"\n          }\n      },\n      {\n          \"nodeName\": \"Environment\",\n          \"assignment\": {\n              \"name\": \"Environment\",\n              \"displayName\": \"Environment\",\n              \"description\": \"Environment.\"\n          },\n          \"parameters\": {\n              \"tagName\": \"Environment\"\n          }\n      },\n      {\n          \"nodeName\": \"Project\",\n          \"assignment\": {\n              \"name\": \"Project\",\n              \"displayName\": \"Project\",\n              \"description\": \"Project.\"\n          },\n          \"parameters\": {\n              \"tagName\": \"Project\"\n          }\n      }\n  ]\n}\n</code></pre>"},{"location":"policy-assignments/#non-compliance-messages-in-a-policy-definition-assignment","title":"Non-Compliance Messages in a Policy Definition Assignment","text":"<p>An example of a policy assignment for a single policy definition with a default non-compliance message.</p> <pre><code>{\n    \"nodeName\": \"test\",\n    \"scope\": {\n        \"issue48\": [\n            \"/providers/Microsoft.Management/managementGroups/issue48\"\n        ]\n    },\n    \"assignment\": {\n        \"displayName\": \"Audit virtual machines without disaster recovery configured\",\n        \"description\": \"Some description\",\n        \"name\": \"46332f3a51cb4bf2b4de78a7\"\n    },\n    \"definitionEntry\": {\n        \"policyName\": \"0015ea4d-51ff-4ce3-8d8c-f3f8f0179a56\" // Single policy definition\n    },\n    \"nonComplianceMessages\": [ // Array of nonComplianceMessages\n        {\n            \"message\": \"Update non-compliance message\" // Default nonComplianceMessage\n        }\n    ],\n    \"parameters\": {}\n}\n</code></pre>"},{"location":"policy-assignments/#non-compliance-messages-in-a-policy-set-definition-assignment","title":"Non-Compliance Messages in a Policy Set Definition Assignment","text":"<p>An example of a policy assignment for a policy set definition with a default non-compliance message and a policy specific non-compliance message.</p> <pre><code>{\n    \"nodeName\": \"test\",\n    \"scope\": {\n        \"issue48\": [\n            \"/providers/Microsoft.Management/managementGroups/issue48\"\n        ]\n    },\n    \"assignment\": {\n        \"displayName\": \"Configure Azure Defender for SQL agents on virtual machines\",\n        \"description\": \"Some other description\",\n        \"name\": \"39a366e6\"\n    },\n    \"definitionEntry\": {\n        \"initiativeName\": \"39a366e6-fdde-4f41-bbf8-3757f46d1611\" // Policy set definition\n    },\n    \"nonComplianceMessages\": [ // Array of nonComplianceMessages\n        {\n            \"message\": \"Update main message\" // Default nonComplianceMessage\n        },\n        {\n            \"message\": \"Individual policy message\", // Policy specific nonComplianceMessage. You must include the policyDefinitionReferenceId as defined in the initiative.\n            \"policyDefinitionReferenceId\": \"ASC_DeployAzureDefenderForSqlAdvancedThreatProtectionWindowsAgent\"\n        }\n    ],\n    \"parameters\": {}\n}\n</code></pre>"},{"location":"policy-assignments/#non-compliance-messages-in-a-policy-set-definition-assignment-with-a-definitionentrylist","title":"Non-Compliance Messages in a Policy Set Definition Assignment with a <code>definitionEntryList</code>","text":"<p>An example of how to use a non-compliance message when using a <code>definitionEntryList</code> list in the assignment.</p> <pre><code>{\n    \"nodeName\": \"test\",\n    \"scope\": {\n        \"issue48\": [\n            \"/providers/Microsoft.Management/managementGroups/issue48\"\n        ]\n    },\n    \"definitionEntryList\": [\n        {\n            \"initiativeName\": \"62329546-775b-4a3d-a4cb-eb4bb990d2c0\",\n            \"assignment\": {\n                \"displayName\": \"Flow logs should be configured and enabled for every network security group\",\n                \"description\": \"Audit for network security groups to verify if flow logs are configured and if flow log status is enabled. Enabling flow logs allows to log information about IP traffic flowing through network security group. It can be used for optimizing network flows, monitoring throughput, verifying compliance, detecting intrusions and more.\",\n                \"name\": \"62329546\"\n            },\n            \"nonComplianceMessages\": [ // nonComplianceMessages must be in the definitionEntryList object for each policy/initiative deployed.\n                {\n                    \"message\": \"Updated Default message\"\n                },\n                {\n                    \"message\": \"Individual policy message\",\n                    \"policyDefinitionReferenceId\": \"NetworkWatcherFlowLog_Enabled_Audit\"\n                }\n            ]\n        },\n        {\n            \"initiativeName\": \"cb5e1e90-7c33-491c-a15b-24885c915752\",\n            \"assignment\": {\n                \"displayName\": \"Enable Azure Cosmos DB throughput policy\",\n                \"description\": \"Enable throughput control for Azure Cosmos DB resources in the specified scope (Management group, Subscription or resource group). Takes max throughput as parameter. Use this policy to help enforce throughput control via the resource provider.\",\n                \"name\": \"cb5e1e90\"\n            }\n        }\n    ],\n    \"parameters\": {\n        \"throughputMax\": 400\n    }\n}\n</code></pre>"},{"location":"policy-definitions/","title":"Policies","text":""},{"location":"policy-definitions/#policy-definition-files","title":"Policy Definition Files","text":"<p>Policy definition files are managed within the folder <code>policyDefinitions</code> under <code>Definitions</code>.  The Policy definition files are structured based on the official Azure Policy definition structure published by Microsoft. There are numerous definition samples available on Microsoft's GitHub repository for azure-policy.</p> <p>Note</p> <p>When authoring Policy and Policy definitions, check out the Maximum count of Azure Policy objects</p> <p>The names of the definition JSON files don't matter, the Policy and Policy Set definitions are registered based on the <code>name</code> attribute. The solution also allows the use of JSON with comments by using <code>.jsonc</code> instead of <code>.json</code> for the file extension.</p>"},{"location":"policy-definitions/#json-schema","title":"JSON Schema","text":"<p>The GitHub repo contains a JSON schema which can be used in tools such as VS Code to provide code completion.</p> <p>To utilize the schema add a <code>$schema</code> tag to the JSON file.</p> <pre><code>{\n  \"$schema\": \"https://raw.githubusercontent.com/Azure/enterprise-azure-policy-as-code/main/Schemas/policy-definition-schema.json\"\n}\n</code></pre> <p>This schema is new in v7.4.x and may not be complete. Please let us know if we missed anything.</p>"},{"location":"policy-definitions/#recommendations","title":"Recommendations","text":"<ul> <li><code>\"name\"</code> is required and should be unique. It can be a GUID or a unique short name.</li> <li><code>\"category\"</code> should be one of the standard ones defined in built-in Policies.</li> <li>Do not specify an <code>id</code>. The solution will ignore it.</li> <li>Make the <code>effect</code> parameterized. Always use the parameter name <code>effect</code>.</li> <li>Whenever feasible, provide a <code>defaultValue</code> for parameters, especially for the <code>effect</code> parameter.</li> <li>Policy aliases are used by Azure Policy to refer to resource type properties in the <code>if</code> condition and in <code>existenceCondition</code>: https://docs.microsoft.com/en-us/azure/governance/policy/concepts/definition-structure#aliases.</li> </ul>"},{"location":"policy-definitions/#example","title":"Example","text":"<pre><code>{\n    \"name\": \"Newly created GUID\",\n    \"properties\": {\n        \"displayName\": \"Policy Display Name\",\n        \"policyType\": \"Custom\",\n        \"mode\": \"All\",\n        \"description\": \"Policy Description\",\n        \"metadata\": {\n            \"version\": \"1.0.0\",\n            \"category\": \"Your Category\"\n        },\n        \"parameters\": {\n            \"YourParameter\": {\n                \"type\": \"String\",\n                \"metadata\": {\n                    \"displayName\": \"YourParameter\",\n                    \"description\": \"Your Parameter Description\"\n                }\n            }\n        },\n        \"policyRule\": {\n            \"if\": {\n                \"Insert Logic Here\"\n            },\n            \"then\": {\n                \"effect\": \"Audit, Deny, Modify, etc.\",\n                \"details\": {\n                    \"roleDefinitionIds\": [],\n                    \"operations\": []\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"policy-exemptions/","title":"Exemptions","text":""},{"location":"policy-exemptions/#exemption-files","title":"Exemption Files","text":"<p>Exemptions can be defined as JSON or CSV files (we recommend that you use CSV files). The names of the definition files don't matter. If multiple files exists in a folder, the lists from all the files are added together.</p> <p>The pacEnvironment (see global-settings.jsonc) is represented with a folder structure under the folder policyExemptions, such as epac-dev, tenant, ... A missing folder indicates that the pacEnvironment's Exemptions are not managed by this solution. To extract existing exemptions, the operations script Get-AzExemptions.ps1 can be used to generate JSON and CSV files. The output may be used to start the Exemption definitions. This same output is also created when Extract existing Policy Resources from an Environment.</p> <p>The <code>desiredState</code> in global-settings.json allows for some modifications to the behavior of exemptions at deployment.  </p> <p><code>deleteExpiredExemptions</code> - Default is true.  When set to false, EPAC will not delete expired, owned exemptions.  This is primarily used to prevent errors in EPAC deployments for organizations that choose to apply delete locks.</p> <p><code>deleteOrphanedExemptions</code> - Default is true.  When set to false, EPAC will not delete orphaned, owned exemptions.  This is primarily used to prevent errors in EPAC deployments for organizations that choose to apply delete locks.</p> <p>EPAC will ignore all exemptions not owned by the executing pacOwnerId.</p> <p>A typical folder structure might look like this:</p> <pre><code>Definitions\n  policyExemptions\n    epac-dev\n      &lt;name&gt;.csv of &lt;name&gt;.json\n    tenant\n      &lt;name&gt;.csv of &lt;name&gt;.json\n</code></pre>"},{"location":"policy-exemptions/#csv-format","title":"CSV Format","text":"<p>We recommend that you use spreadsheets (<code>.csv</code>). The columns must have the following headers:</p> <ul> <li><code>name</code> - unique name.</li> <li><code>displayName</code> - descriptive name displayed on portal.</li> <li><code>exemptionCategory</code> - <code>waiver</code> or <code>mitigated</code>.</li> <li><code>expiresOn</code> - empty or expiry date.</li> <li><code>scope</code> - Management Group, subscription, Resource Group or resource.</li> <li><code>policyAssignmentId</code> - fully qualified assignment id.</li> <li><code>policyDefinitionReferenceIds</code> use comma separated list within each cell.</li> <li><code>metadata</code> - valid JSON (see JSON format below)</li> <li>Optional</li> <li><code>assignmentScopeValidation</code> - <code>Default</code> or <code>DoNotValidate</code></li> <li><code>resourceSelectors</code> - valid JSON (see JSON format below)</li> </ul>"},{"location":"policy-exemptions/#json-schema","title":"JSON Schema","text":"<p>The GitHub repo contains a JSON schema which can be used in tools such as VS Code to provide code completion.</p> <p>To utilize the schema add a <code>$schema</code> tag to the JSON file.</p> <pre><code>{\n  \"$schema\": \"https://raw.githubusercontent.com/Azure/enterprise-azure-policy-as-code/main/Schemas/policy-exemption-schema.json\"\n}\n</code></pre> <p>This schema is new in v7.4.x and may not be complete. Please let us know if we missed anything.</p>"},{"location":"policy-exemptions/#json-format","title":"JSON Format","text":"<p><code>name</code>, <code>displayName</code>, <code>exemptionCategory</code>, <code>scope</code> and <code>policyAssignmentId</code> are required fields. The others are optional.</p> <pre><code>{\n    \"exemptions\": [\n        {\n            \"name\": \"Unique name\",\n            \"displayName\": \"Descriptive name displayed on portal\",\n            \"description\": \"More details\",\n            \"exemptionCategory\": \"waiver\",\n            \"scope\": \"/subscriptions/11111111-2222-3333-4444-555555555555\",\n            \"policyAssignmentId\": \"/providers/microsoft.management/managementgroups/contoso-prod/providers/microsoft.authorization/policyassignments/prod-asb\",\n            \"policyDefinitionReferenceIds\": [\n                \"webApplicationFirewallShouldBeEnabledForApplicationGatewayMonitoringEffect\"\n            ],\n            \"metadata\": {\n                \"custom\": \"value\"\n            },\n            \"assignmentScopeValidation\": \"Default\",\n            \"resourceSelectors\": [\n              // see Microsoft documentation for details\n            ]\n        }\n    ]\n}\n</code></pre>"},{"location":"policy-set-definitions/","title":"Policy Set (Initiative) Definitions","text":""},{"location":"policy-set-definitions/#initiative-policy-set-definition-files","title":"Initiative (Policy Set) Definition Files","text":"<p>Policy Set definition files are managed within the folder <code>policySetDefinitions</code> under <code>Definitions</code>. The definition files are structured based on the official Azure Initiative definition structure published by Microsoft. There are numerous definition samples available on Microsoft's GitHub repository for azure-policy.</p> <p>Note</p> <p>When authoring Policy or Policy Set definitions, check out the Maximum count of Azure Policy objects</p> <p>The names of the definition JSON files don't matter, the Policy Sets are registered based on the <code>name</code> attribute. The solution also allows the use of JSON with comments by using <code>.jsonc</code> instead of <code>.json</code> for the file extension.</p> <p>Optional: Policy definition groups allow custom Policy Sets to map to different regulatory compliance requirements. These will show up in the regulatory compliance blade in Azure Security Center as if they were built-in. In order to use this, the custom Policy Sets must have both policy definition groups and group names defined.</p> <ul> <li>Policy definition groups must be pulled from a built-in Policy Sets such as the Azure Security Benchmark initiative (Azure Initiative definition structure published by Microsoft). There are numerous definition samples available on Microsoft's GitHub Azure Security Benchmark Code.</li> <li>Policy definition groups can be imported by using <code>importPolicyDefinitionGroups</code>. The following imports the groups from Azure Security Benchmark.</li> </ul> <pre><code>    \"importPolicyDefinitionGroups\": [\n      // built-in Policy Set definition (ASB v3)\n      \"/providers/Microsoft.Authorization/policySetDefinitions/1f3afdf9-d0c9-4c3d-847f-89da613e70a8\"\n    ],\n</code></pre>"},{"location":"policy-set-definitions/#recommendations","title":"Recommendations","text":"<ul> <li><code>\"name\"</code> is required and should be unique. It can be a GUID or a unique short name.</li> <li><code>\"category\"</code> should be one of the standard ones defined in built-in Policies.</li> <li>Custom Policies: use <code>policyDefinitionName</code>. The solution constructs the <code>policyDefinitionId</code> based on the <code>deploymentRootScope</code> in <code>global-settings.jsonc</code>.</li> <li>Builtin Policies: use <code>policyDefinitionId</code>. The solution can constructs the <code>policyDefinitionId</code> from <code>policyDefinitionName</code> for builtin Policies; however using <code>policyDefinitionId</code> is more explicit/cleaner.</li> <li>Do not specify an <code>id</code>. The solution will ignore it.</li> <li>Make  the <code>effects</code> parameterized</li> </ul>"},{"location":"policy-set-definitions/#json-schema","title":"JSON Schema","text":"<p>The GitHub repo contains a JSON schema which can be used in tools such as VS Code to provide code completion.</p> <p>To utilize the schema add a <code>$schema</code> tag to the JSON file.</p> <pre><code>{\n  \"$schema\": \"https://raw.githubusercontent.com/Azure/enterprise-azure-policy-as-code/main/Schemas/policy-set-definition-schema.json\"\n}\n</code></pre> <p>This schema is new in v7.4.x and may not be complete. Please let us know if we missed anything.</p>"},{"location":"policy-set-definitions/#example","title":"Example","text":"<pre><code>{\n  \"name\": \"Newly created GUID\",\n  \"properties\": {\n    \"displayName\": \"Your Initiative Display Name\",\n    \"description\": \"Initiative Description\",\n    \"metadata\": {\n      \"version\": \"1.0.0\",\n      \"category\": \"Category Name\"\n    },\n    \"policyDefinitionGroups\": [\n      {\n        \"name\": \"Azure_Security_Benchmark_v2.0_NS-1\",\n        \"additionalMetadataId\": \"/providers/Microsoft.PolicyInsights/policyMetadata/Azure_Security_Benchmark_v2.0_NS-1\"\n      }\n    ],\n    \"parameters\": {\n      \"Parameter for policy one\": {\n        \"type\": \"Array\",\n        \"defaultValue\": []\n      },\n      \"Parameter for policy two\": {\n        \"type\": \"string\",\n        \"defaultValue\": []\n      }\n    },\n    \"policyDefinitions\": [\n      {\n        \"policyDefinitionReferenceId\": \"Reference to policy number one\",\n        \"policyDefinitionName\": \"Name of Policy Number One\",\n        \"parameters\": {\n          \"Parameter for policy one\": {\n            \"value\": \"[parameters('Parameter for policy one')]\"\n          }\n        }\n      },\n      {\n        \"policyDefinitionReferenceId\": \"Reference to policy number two\",\n        \"policyDefinitionName\": \"Name of Policy Number Two\",\n        \"parameters\": {\n          \"Parameter for policy two\": {\n            \"value\": \"[parameters('Parameter for policy two')]\"\n          }\n        },\n        \"groupNames\": [\n            \"Azure_Security_Benchmark_v2.0_NS-1\"\n        ]\n      },\n      {\n        \"policyDefinitionReferenceId\": \"Reference to policy number two\",\n        \"policyDefinitionId\": \"id of a builtin Policy\",\n        \"parameters\": {\n          \"Parameter for policy two\": {\n            \"value\": \"[parameters('Parameter for policy two')]\"\n          }\n        },\n        \"groupNames\": [\n            \"Azure_Security_Benchmark_v2.0_NS-1\"\n        ]\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"quick-start/","title":"Getting Started","text":"<p>EPAC scripts can be installed in the following ways:</p> <ul> <li>Install the <code>EnterprisePolicyAsCode</code> module from the PowerShell marketplace. This is the recommended approach documented in step 3 below.</li> <li>Copy the source code from the EPAC GitHub repository. The process is described in Alternate Script Installation page. That process replaces step 4 below.</li> </ul>"},{"location":"quick-start/#epac-quick-start","title":"EPAC Quick Start","text":"<p>In this quick start you can get set up with EPAC and use it to extract the policies and assignments in your own environment. From that point you can either choose to let EPAC manage the policies or look at some of the more advanced features allowing you to complete a gradual rollout.</p> <p>For this example all you need is <code>Reader</code> permission in your Azure environment and to follow the steps below.</p> <ol> <li>Install PowerShell 7.</li> <li>Install the Az PowerShell modules and connect to Azure. <pre><code>    Install-Module Az -Scope CurrentUser\n    Connect-AzAccount\n</code></pre></li> <li>Install the Enterprise Policy as Code module. <pre><code>    Install-Module EnterprisePolicyAsCode -Scope CurrentUser\n</code></pre></li> <li> <p>Many scripts use parameters for input and output folders. They default to the current directory. We recommend that you do one of the following approaches instead of accepting the default to prevent your files being created in the wrong location:</p> <ul> <li>Set the environment variables <code>PAC_DEFINITIONS_FOLDER</code>, <code>PAC_OUTPUT_FOLDER</code>, and <code>PAC_INPUT_FOLDER</code>.</li> <li>Use the script parameters <code>-DefinitionsRootFolder</code>, <code>-OutputFolder</code>, and <code>-InputFolder</code>.</li> </ul> </li> <li> <p>Create a new EPAC definitions folder to hold policy objects. <pre><code>    New-EPACDefinitionFolder -DefinitionsRootFolder Definitions\n</code></pre></p> </li> <li>This will create a folder called <code>Definitions</code> with a number of subfolder and a <code>global-settings.jsonc</code> file where the environment is defined.</li> <li>Edit the <code>global-settings.jsonc</code> file by copying the sample below. Modify the commented sections as appropriate. <pre><code>    {\n        \"$schema\": \"https://raw.githubusercontent.com/Azure/enterprise-azure-policy-as-code/main/Schemas/global-settings-schema.json\",\n        \"pacOwnerId\": \"f2ce1aea-944e-4517-94fb-edada00633ae\", // Generate a guid using New-Guid and place it here\n        \"managedIdentityLocations\": {\n            \"*\": \"australiaeast\" // Update the default location for managed identities\n        },\n        \"globalNotScopes\": {\n            \"*\": [\n                \"/resourceGroupPatterns/excluded-rg*\"\n            ]\n        },\n        \"pacEnvironments\": [\n            {\n                \"pacSelector\": \"quick-start\",\n                \"cloud\": \"AzureCloud\",\n                \"tenantId\": \"bdb8ea1c-17da-4423-8895-6b79af002b4e\", // Replace this with your tenant Id\n                \"deploymentRootScope\": \"/providers/Microsoft.Management/managementGroups/root\" // Replace this with a management group that represents the functional root in your environment. \n            }\n        ]\n    }\n</code></pre></li> <li>Extract all the existing policies and assignments at the scope indicated above by running the script below. <pre><code>    Export-AzPolicyResources -DefinitionsRootFolder .\\Definitions -OutputFolder Output\n</code></pre></li> </ol> <p>In the <code>Output</code> folder you should now find all the custom policy definitions and assignments which have been deployed in your environment. From this point you can make some choices about how to best utilize EPAC to handle Azure Policy in your environment including:-</p> <ul> <li>Copy the Output files into the appropriate folders in your <code>Definitions</code> folder and use the <code>Build-DeploymentPlans</code> command to generate a plan for policy deployment. Once the plan is generated you can use the <code>Deploy-PolicyPlan</code> and <code>Deploy-RolesPlan</code> commands to start managing deployed policies with EPAC.</li> <li>Read up on Desired State Strategy and plan a gradual rollout of policy using EPAC.</li> <li>Use the artifacts in the Starter Kit for some in-depth examples and sample pipelines for CI/CD integration. </li> <li>Review the rest of this documentation to examine some of the more complex EPAC features.</li> </ul> <p>If there are any issue please raise them in the (GitHub Repository)[https://github.com/Azure/enterprise-azure-policy-as-code/issues].</p>"},{"location":"quick-start/#create-your-environment","title":"Create your environment","text":"<ul> <li>Setup DevOps Environment for your developers (on their workstations) and your CI/CD pipeline runners/agents (on a VM or set of VMs) to facilitate correct implementations.  Operating Environment Prerequisites: The EPAC Deployment process is designed for DevOps CI/CD. It requires the installation of several tools to facilitate effective development, testing, and deployment during the course of a successful implementation.</li> <li>Acquire the PowerShell scripts (options)</li> <li>Import Azure PowerShell Module</li> <li>Create a source repository and import the source code from this repository.</li> </ul>"},{"location":"quick-start/#define-your-deployment-scenarios","title":"Define your deployment scenarios","text":"<ul> <li>Select the desired state strategy.</li> <li>Define your deployment environment in <code>global-settings.jsonc</code>.</li> </ul>"},{"location":"quick-start/#create-the-cicd-skip-if-using-the-semi-automated-approach","title":"Create the CI/CD (skip if using the semi-automated approach)","text":"<ul> <li>Copy starter kit pipeline definition and definition folder to your folders.</li> <li>Build your CI/CD pipeline using a starter kit.</li> </ul>"},{"location":"quick-start/#build-your-definitions-and-assignments","title":"Build your definitions and assignments","text":"<ul> <li>Generate a starting point for the <code>Definitions</code> subfolders:</li> <li>Extract existing Policy resources from an environment.</li> <li>Import Policies from the Cloud Adoption Framework.</li> <li>Use the sample Policy resource definitions in the starter kit.</li> <li>Start from scratch.</li> <li>Add custom Policies.</li> <li>Add custom Policy Sets.</li> <li>Create Policy Assignments.</li> </ul>"},{"location":"quick-start/#manage-your-policy-environment","title":"Manage your Policy environment","text":"<ul> <li>Manage Policy Exemptions.</li> <li>Document your deployments.</li> <li>Execute operational tasks.</li> </ul>"},{"location":"quick-start/#debug-epac-issues","title":"Debug EPAC issues","text":"<p>Should you encounter issues with the expected behavior of EPAC, try the following:</p> <ul> <li>Run the scripts interactively.</li> <li>Debug the scripts in VS Code.</li> <li>Ask for help by raising a GitHub Issue</li> </ul>"},{"location":"tips/","title":"Tips","text":"<p>Miscellaneous explanation to get the most from EPAC.</p>"},{"location":"tips/#export-azpolicyresources","title":"Export-AzPolicyResources","text":"<p>If the <code>global-settings.jsonc</code> contains <code>managedIdentityLocations</code> or <code>globalNotScopes</code> any matching <code>managedIdentityLocations</code> and <code>notScopes</code> are not emitted as part of the assignment files.</p>"},{"location":"tips/#parameter-csv-files","title":"Parameter CSV Files","text":"<p>If an <code>effect</code> parameter is not specified in the CSV file, the default value from the definition is used.</p> <p>If an <code>effect</code> for a Policy is not surfaced as a parameter at the Policy Set, EPAC will use the Policy Assignment <code>overrides</code> feature to set the desired value. Conversely, if an <code>effect</code> for a Policy is surfaced as a parameter at the Policy Set, EPAC will not use the Policy Assignment <code>overrides</code> feature to set the desired value.</p> <p>Build-PolicyDocumentation.ps1 will include the <code>overrides</code> in the effective <code>effect</code> value.</p>"},{"location":"tips/#role-assignments","title":"Role Assignments","text":"<p><code>Build-DeploymentPlan.ps1</code> will not calculate Role Assignments for user-assigned Managed Identities (UAMI) and will not generate a <code>roles-plan.json</code> file.</p> <p><code>additionalRoleAssignments</code> are used when a resource required is not in the current scope. For example, a Policy Assignment that requires a Event Hub to be managed in a subscription not contained in the current management group.</p>"},{"location":"usage-tracking/","title":"Usage Tracking","text":"<p>Starting with v8.0.0, Enterprise Policy as Code (EPAC) is tracking the usage using Customer Usage Attribution (PID).</p>"},{"location":"usage-tracking/#telemetry-tracking-using-customer-usage-attribution-pid","title":"Telemetry Tracking Using Customer Usage Attribution (PID)","text":"<p>Microsoft can identify the deployments of the Azure Resource Manager with the deployed Azure resources. Microsoft can correlate these resources used to support the deployments. Microsoft collects this information to provide the best experiences with their products and to operate their business. The telemetry is collected through customer usage attribution. The data is collected and governed by Microsoft's privacy policies, located at the trust center.</p> <p>To opt-out of this tracking, we have included a settings in <code>global-settings.jsonc</code> called <code>telemetryOptOut</code>. If you would like to disable this tracking, then simply set this value to <code>true</code> (default is <code>false</code>).</p> <p>If you are happy with leaving telemetry tracking enabled, no changes are required.</p>"},{"location":"usage-tracking/#module-pid-value-mapping","title":"Module PID Value Mapping","text":"<p>The following is the unique IDs (also known as PIDs) used in each of the modules:</p> Function Name PID <code>Deploy-PolicyPlan</code> <code>3c88f740-55a8-4a96-9fba-30a81b52151a</code> <code>Deploy-PolicyPlan</code> <code>fe9ff1e8-5521-4b9d-ab1d-84e15447565e</code> <code>Deploy-RolesPlan</code> <code>cf031290-b7d4-48ef-9ff5-4dcd7bff8c6c</code> <code>Build-PolicyDocumentation</code> <code>2dc29bae-2448-4d7f-b911-418421e83900</code> <code>Create-AzRemediationTasks</code> <code>6f4dcbef-f6e2-4c29-ba2a-eef748d88157</code> <code>Export-AzPolicyResources</code> <code>dc5b73fd-e93c-40ca-8fef-976762d1d30</code> <code>Export-NonComplianceReports</code> <code>f464b017-898b-4156-9da5-af932831fa2f</code> <code>Get-AzExemptions</code> <code>3f02e7d5-1cf5-490a-a95c-3d49f0673093</code> <code>New-AzPolicyReaderRole</code> <code>f4b5b7ac-70b4-40fc-836f-585791aa83e7</code>"}]}